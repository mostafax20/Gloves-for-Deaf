
GFD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ee6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000f3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000f3a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f6c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000150  00000000  00000000  00000fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002864  00000000  00000000  000010f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a2b  00000000  00000000  0000395c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000011c2  00000000  00000000  00004387  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000260  00000000  00000000  0000554c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000068d  00000000  00000000  000057ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f2e  00000000  00000000  00005e39  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000158  00000000  00000000  00006d67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5d 07 	call	0xeba	; 0xeba <main>
  64:	0c 94 71 07 	jmp	0xee2	; 0xee2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_init>:
#include "ADC_interface.h"

void ADC_init( void )
{
	// SELECT REFRENCE VOLTAGE "Vref" = AVCC
	SET_BIT( ADMUX , 6 );
  6c:	87 b1       	in	r24, 0x07	; 7
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	87 b9       	out	0x07, r24	; 7
	CLR_BIT( ADMUX , 7 );
  72:	87 b1       	in	r24, 0x07	; 7
  74:	8f 77       	andi	r24, 0x7F	; 127
  76:	87 b9       	out	0x07, r24	; 7
	// Select right adjustment to read all 10 bits 
	CLR_BIT( ADMUX , 5 );
  78:	87 b1       	in	r24, 0x07	; 7
  7a:	8f 7d       	andi	r24, 0xDF	; 223
  7c:	87 b9       	out	0x07, r24	; 7
	// SINGLE MODE (close auto trigger) 
	CLR_BIT( ADCSRA , 5 );
  7e:	86 b1       	in	r24, 0x06	; 6
  80:	8f 7d       	andi	r24, 0xDF	; 223
  82:	86 b9       	out	0x06, r24	; 6
	//ADC ENABLE
	SET_BIT( ADCSRA , 7 );
  84:	86 b1       	in	r24, 0x06	; 6
  86:	80 68       	ori	r24, 0x80	; 128
  88:	86 b9       	out	0x06, r24	; 6
	// Prescaler to adjust the clock 128 for 16MHZ ( 125 KHZ)
	SET_BIT( ADCSRA , 0 );
  8a:	86 b1       	in	r24, 0x06	; 6
  8c:	81 60       	ori	r24, 0x01	; 1
  8e:	86 b9       	out	0x06, r24	; 6
	SET_BIT( ADCSRA , 1 );
  90:	86 b1       	in	r24, 0x06	; 6
  92:	82 60       	ori	r24, 0x02	; 2
  94:	86 b9       	out	0x06, r24	; 6
	SET_BIT( ADCSRA , 2 );
  96:	86 b1       	in	r24, 0x06	; 6
  98:	84 60       	ori	r24, 0x04	; 4
  9a:	86 b9       	out	0x06, r24	; 6
  9c:	08 95       	ret

0000009e <ADC_getDigitalValue>:


void ADC_getDigitalValue( u8 channelNum , u16* digitalValue )
{
		
	if ( ( channelNum < 32 ) && ( digitalValue != NULL ) )
  9e:	80 32       	cpi	r24, 0x20	; 32
  a0:	b0 f4       	brcc	.+44     	; 0xce <ADC_getDigitalValue+0x30>
  a2:	61 15       	cp	r22, r1
  a4:	71 05       	cpc	r23, r1
  a6:	99 f0       	breq	.+38     	; 0xce <ADC_getDigitalValue+0x30>
	{
		ADMUX &= (0b11100000);//Clear the 5 bits to avoid error when changing channel number at runtime
  a8:	97 b1       	in	r25, 0x07	; 7
  aa:	90 7e       	andi	r25, 0xE0	; 224
  ac:	97 b9       	out	0x07, r25	; 7
		ADMUX |= channelNum;//select channel number 
  ae:	97 b1       	in	r25, 0x07	; 7
  b0:	89 2b       	or	r24, r25
  b2:	87 b9       	out	0x07, r24	; 7
		SET_BIT( ADCSRA , 6 );// start conversion 
  b4:	86 b1       	in	r24, 0x06	; 6
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	86 b9       	out	0x06, r24	; 6
		while( GET_BIT( ADCSRA , 4 ) == 0 );//READ FLAG-> CONVERSION HAS BEEN ENDED WHEN FLAG =1  ( INFINITE LOOP UNTIL THE HARDWARE UPDATES THE FLAG )
  ba:	34 9b       	sbis	0x06, 4	; 6
  bc:	fe cf       	rjmp	.-4      	; 0xba <ADC_getDigitalValue+0x1c>
        SET_BIT( ADCSRA , 4 );// TO CLEAR THE FLAG.....SETTING THE BIT -> THE FLAG WILL BE CLEARED TO AVOID CHANGING FLAG STATUS  	
  be:	86 b1       	in	r24, 0x06	; 6
  c0:	80 61       	ori	r24, 0x10	; 16
  c2:	86 b9       	out	0x06, r24	; 6
	    *digitalValue = ADC_u16;//read digital value (all 10 bits ) 
  c4:	84 b1       	in	r24, 0x04	; 4
  c6:	95 b1       	in	r25, 0x05	; 5
  c8:	fb 01       	movw	r30, r22
  ca:	91 83       	std	Z+1, r25	; 0x01
  cc:	80 83       	st	Z, r24
  ce:	08 95       	ret

000000d0 <DIO_setPinDirection>:


/* Pin Apis */								   
void DIO_setPinDirection(u8 PortId, u8 PinId, u8 PinDirection)
{
	if((PortId<=3) && (PinId<=7) && ((PinDirection == DIO_PIN_OUTPUT)||(PinDirection == DIO_PIN_INPUT)))
  d0:	84 30       	cpi	r24, 0x04	; 4
  d2:	08 f0       	brcs	.+2      	; 0xd6 <DIO_setPinDirection+0x6>
  d4:	72 c0       	rjmp	.+228    	; 0x1ba <DIO_setPinDirection+0xea>
  d6:	68 30       	cpi	r22, 0x08	; 8
  d8:	08 f0       	brcs	.+2      	; 0xdc <DIO_setPinDirection+0xc>
  da:	6f c0       	rjmp	.+222    	; 0x1ba <DIO_setPinDirection+0xea>
  dc:	42 30       	cpi	r20, 0x02	; 2
  de:	08 f0       	brcs	.+2      	; 0xe2 <DIO_setPinDirection+0x12>
  e0:	6c c0       	rjmp	.+216    	; 0x1ba <DIO_setPinDirection+0xea>
	{
		switch(PortId)
  e2:	81 30       	cpi	r24, 0x01	; 1
  e4:	01 f1       	breq	.+64     	; 0x126 <DIO_setPinDirection+0x56>
  e6:	30 f0       	brcs	.+12     	; 0xf4 <DIO_setPinDirection+0x24>
  e8:	82 30       	cpi	r24, 0x02	; 2
  ea:	b1 f1       	breq	.+108    	; 0x158 <DIO_setPinDirection+0x88>
  ec:	83 30       	cpi	r24, 0x03	; 3
  ee:	09 f4       	brne	.+2      	; 0xf2 <DIO_setPinDirection+0x22>
  f0:	4c c0       	rjmp	.+152    	; 0x18a <DIO_setPinDirection+0xba>
  f2:	08 95       	ret
	 {
		case DIO_PORTA:
		if (DIO_PIN_OUTPUT == PinDirection)
  f4:	41 30       	cpi	r20, 0x01	; 1
  f6:	59 f4       	brne	.+22     	; 0x10e <DIO_setPinDirection+0x3e>
		{
			SET_BIT(DDRA,PinId);
  f8:	2a b3       	in	r18, 0x1a	; 26
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_setPinDirection+0x34>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_setPinDirection+0x30>
 108:	82 2b       	or	r24, r18
 10a:	8a bb       	out	0x1a, r24	; 26
 10c:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,PinId);
 10e:	2a b3       	in	r18, 0x1a	; 26
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_setPinDirection+0x4a>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_setPinDirection+0x46>
 11e:	80 95       	com	r24
 120:	82 23       	and	r24, r18
 122:	8a bb       	out	0x1a, r24	; 26
 124:	08 95       	ret
		}
		break;
		
		case DIO_PORTB:
		if (DIO_PIN_OUTPUT == PinDirection)
 126:	41 30       	cpi	r20, 0x01	; 1
 128:	59 f4       	brne	.+22     	; 0x140 <DIO_setPinDirection+0x70>
		{
			SET_BIT(DDRB,PinId);
 12a:	27 b3       	in	r18, 0x17	; 23
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_setPinDirection+0x66>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_setPinDirection+0x62>
 13a:	82 2b       	or	r24, r18
 13c:	87 bb       	out	0x17, r24	; 23
 13e:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,PinId);
 140:	27 b3       	in	r18, 0x17	; 23
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_setPinDirection+0x7c>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_setPinDirection+0x78>
 150:	80 95       	com	r24
 152:	82 23       	and	r24, r18
 154:	87 bb       	out	0x17, r24	; 23
 156:	08 95       	ret
		}
		break;
		
		case DIO_PORTC:
		if (DIO_PIN_OUTPUT == PinDirection)
 158:	41 30       	cpi	r20, 0x01	; 1
 15a:	59 f4       	brne	.+22     	; 0x172 <DIO_setPinDirection+0xa2>
		{
			SET_BIT(DDRC,PinId);
 15c:	24 b3       	in	r18, 0x14	; 20
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_setPinDirection+0x98>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <DIO_setPinDirection+0x94>
 16c:	82 2b       	or	r24, r18
 16e:	84 bb       	out	0x14, r24	; 20
 170:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,PinId);
 172:	24 b3       	in	r18, 0x14	; 20
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_setPinDirection+0xae>
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	6a 95       	dec	r22
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_setPinDirection+0xaa>
 182:	80 95       	com	r24
 184:	82 23       	and	r24, r18
 186:	84 bb       	out	0x14, r24	; 20
 188:	08 95       	ret
		}
		break;
		
		case DIO_PORTD:
		if (DIO_PIN_OUTPUT == PinDirection)
 18a:	41 30       	cpi	r20, 0x01	; 1
 18c:	59 f4       	brne	.+22     	; 0x1a4 <DIO_setPinDirection+0xd4>
		{
			SET_BIT(DDRD,PinId);
 18e:	21 b3       	in	r18, 0x11	; 17
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_setPinDirection+0xca>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_setPinDirection+0xc6>
 19e:	82 2b       	or	r24, r18
 1a0:	81 bb       	out	0x11, r24	; 17
 1a2:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,PinId);
 1a4:	21 b3       	in	r18, 0x11	; 17
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_setPinDirection+0xe0>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_setPinDirection+0xdc>
 1b4:	80 95       	com	r24
 1b6:	82 23       	and	r24, r18
 1b8:	81 bb       	out	0x11, r24	; 17
 1ba:	08 95       	ret

000001bc <DIO_setPinValue>:
}


void DIO_setPinValue(u8 PortId, u8 PinId, u8 PinValue)
{
	if((PortId<=3) && (PinId<=7) && ((PinValue == DIO_PIN_HIGH)||(PinValue == DIO_PIN_LOW)))
 1bc:	84 30       	cpi	r24, 0x04	; 4
 1be:	08 f0       	brcs	.+2      	; 0x1c2 <DIO_setPinValue+0x6>
 1c0:	72 c0       	rjmp	.+228    	; 0x2a6 <DIO_setPinValue+0xea>
 1c2:	68 30       	cpi	r22, 0x08	; 8
 1c4:	08 f0       	brcs	.+2      	; 0x1c8 <DIO_setPinValue+0xc>
 1c6:	6f c0       	rjmp	.+222    	; 0x2a6 <DIO_setPinValue+0xea>
 1c8:	42 30       	cpi	r20, 0x02	; 2
 1ca:	08 f0       	brcs	.+2      	; 0x1ce <DIO_setPinValue+0x12>
 1cc:	6c c0       	rjmp	.+216    	; 0x2a6 <DIO_setPinValue+0xea>
	{
		switch(PortId)
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	01 f1       	breq	.+64     	; 0x212 <DIO_setPinValue+0x56>
 1d2:	30 f0       	brcs	.+12     	; 0x1e0 <DIO_setPinValue+0x24>
 1d4:	82 30       	cpi	r24, 0x02	; 2
 1d6:	b1 f1       	breq	.+108    	; 0x244 <DIO_setPinValue+0x88>
 1d8:	83 30       	cpi	r24, 0x03	; 3
 1da:	09 f4       	brne	.+2      	; 0x1de <DIO_setPinValue+0x22>
 1dc:	4c c0       	rjmp	.+152    	; 0x276 <DIO_setPinValue+0xba>
 1de:	08 95       	ret
	{
		case DIO_PORTA:
		if (DIO_PIN_HIGH == PinValue)
 1e0:	41 30       	cpi	r20, 0x01	; 1
 1e2:	59 f4       	brne	.+22     	; 0x1fa <DIO_setPinValue+0x3e>
		{
			SET_BIT(PORTA,PinId);
 1e4:	2b b3       	in	r18, 0x1b	; 27
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_setPinValue+0x34>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_setPinValue+0x30>
 1f4:	82 2b       	or	r24, r18
 1f6:	8b bb       	out	0x1b, r24	; 27
 1f8:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,PinId);
 1fa:	2b b3       	in	r18, 0x1b	; 27
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_setPinValue+0x4a>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_setPinValue+0x46>
 20a:	80 95       	com	r24
 20c:	82 23       	and	r24, r18
 20e:	8b bb       	out	0x1b, r24	; 27
 210:	08 95       	ret
		}
		break;
		
		case DIO_PORTB:
		if (DIO_PIN_HIGH == PinValue)
 212:	41 30       	cpi	r20, 0x01	; 1
 214:	59 f4       	brne	.+22     	; 0x22c <DIO_setPinValue+0x70>
		{
			SET_BIT(PORTB,PinId);
 216:	28 b3       	in	r18, 0x18	; 24
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_setPinValue+0x66>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_setPinValue+0x62>
 226:	82 2b       	or	r24, r18
 228:	88 bb       	out	0x18, r24	; 24
 22a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,PinId);
 22c:	28 b3       	in	r18, 0x18	; 24
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_setPinValue+0x7c>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_setPinValue+0x78>
 23c:	80 95       	com	r24
 23e:	82 23       	and	r24, r18
 240:	88 bb       	out	0x18, r24	; 24
 242:	08 95       	ret
		}
		break;
		
		case DIO_PORTC:
		if (DIO_PIN_HIGH == PinValue)
 244:	41 30       	cpi	r20, 0x01	; 1
 246:	59 f4       	brne	.+22     	; 0x25e <DIO_setPinValue+0xa2>
		{
			SET_BIT(PORTC,PinId);
 248:	25 b3       	in	r18, 0x15	; 21
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_setPinValue+0x98>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_setPinValue+0x94>
 258:	82 2b       	or	r24, r18
 25a:	85 bb       	out	0x15, r24	; 21
 25c:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,PinId);
 25e:	25 b3       	in	r18, 0x15	; 21
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_setPinValue+0xae>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	6a 95       	dec	r22
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_setPinValue+0xaa>
 26e:	80 95       	com	r24
 270:	82 23       	and	r24, r18
 272:	85 bb       	out	0x15, r24	; 21
 274:	08 95       	ret
		}
		break;
		
		case DIO_PORTD:
		if (DIO_PIN_HIGH == PinValue)
 276:	41 30       	cpi	r20, 0x01	; 1
 278:	59 f4       	brne	.+22     	; 0x290 <DIO_setPinValue+0xd4>
		{
			SET_BIT(PORTD,PinId);
 27a:	22 b3       	in	r18, 0x12	; 18
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_setPinValue+0xca>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_setPinValue+0xc6>
 28a:	82 2b       	or	r24, r18
 28c:	82 bb       	out	0x12, r24	; 18
 28e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,PinId);
 290:	22 b3       	in	r18, 0x12	; 18
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_setPinValue+0xe0>
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	6a 95       	dec	r22
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_setPinValue+0xdc>
 2a0:	80 95       	com	r24
 2a2:	82 23       	and	r24, r18
 2a4:	82 bb       	out	0x12, r24	; 18
 2a6:	08 95       	ret

000002a8 <EEPROM_Write_Byte>:


void EEPROM_Write_Byte(u8 address,u8 value)
{
	
	while( GET_BIT(EECR,1)==1 );  /* POLLING WITH BLOCKING to wait until the EEWE is cleared */
 2a8:	e1 99       	sbic	0x1c, 1	; 28
 2aa:	fe cf       	rjmp	.-4      	; 0x2a8 <EEPROM_Write_Byte>
	
	EEAR_u16 = address;
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	9f bb       	out	0x1f, r25	; 31
 2b0:	8e bb       	out	0x1e, r24	; 30
	//EECR |= (1<<EERE);
	
	
	EEDR = value;
 2b2:	6d bb       	out	0x1d, r22	; 29
	SET_BIT(EECR,2);						//EECR |= (1<<EEMWE);
 2b4:	8c b3       	in	r24, 0x1c	; 28
 2b6:	84 60       	ori	r24, 0x04	; 4
 2b8:	8c bb       	out	0x1c, r24	; 28
	SET_BIT(EECR,1);						//EECR |= (1<<EEWE);
 2ba:	8c b3       	in	r24, 0x1c	; 28
 2bc:	82 60       	ori	r24, 0x02	; 2
 2be:	8c bb       	out	0x1c, r24	; 28
 2c0:	08 95       	ret

000002c2 <EEPROM_Read_Byte>:
}

u8 EEPROM_Read_Byte(u8 address)
{
	
	while( GET_BIT(EECR,1)==1 );
 2c2:	e1 99       	sbic	0x1c, 1	; 28
 2c4:	fe cf       	rjmp	.-4      	; 0x2c2 <EEPROM_Read_Byte>
	

	EEAR_u16 = address;
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	9f bb       	out	0x1f, r25	; 31
 2ca:	8e bb       	out	0x1e, r24	; 30

	SET_BIT(EECR,0);							//EECR |= (1<<EERE);
 2cc:	8c b3       	in	r24, 0x1c	; 28
 2ce:	81 60       	ori	r24, 0x01	; 1
 2d0:	8c bb       	out	0x1c, r24	; 28
	

	return EEDR;
 2d2:	8d b3       	in	r24, 0x1d	; 29
	
	
 2d4:	08 95       	ret

000002d6 <savingSentences>:


void savingSentences(void)
{
	//I Love You
	EEPROM_Write_Byte(0,'I');
 2d6:	69 e4       	ldi	r22, 0x49	; 73
 2d8:	70 e0       	ldi	r23, 0x00	; 0
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(1,' ');
 2e2:	60 e2       	ldi	r22, 0x20	; 32
 2e4:	70 e0       	ldi	r23, 0x00	; 0
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(2,'L');
 2ee:	6c e4       	ldi	r22, 0x4C	; 76
 2f0:	70 e0       	ldi	r23, 0x00	; 0
 2f2:	82 e0       	ldi	r24, 0x02	; 2
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(3,'o');
 2fa:	6f e6       	ldi	r22, 0x6F	; 111
 2fc:	70 e0       	ldi	r23, 0x00	; 0
 2fe:	83 e0       	ldi	r24, 0x03	; 3
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(4,'v');
 306:	66 e7       	ldi	r22, 0x76	; 118
 308:	70 e0       	ldi	r23, 0x00	; 0
 30a:	84 e0       	ldi	r24, 0x04	; 4
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(5,'e');
 312:	65 e6       	ldi	r22, 0x65	; 101
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	85 e0       	ldi	r24, 0x05	; 5
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(6,' ');
 31e:	60 e2       	ldi	r22, 0x20	; 32
 320:	70 e0       	ldi	r23, 0x00	; 0
 322:	86 e0       	ldi	r24, 0x06	; 6
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(7,'Y');
 32a:	69 e5       	ldi	r22, 0x59	; 89
 32c:	70 e0       	ldi	r23, 0x00	; 0
 32e:	87 e0       	ldi	r24, 0x07	; 7
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(8,'o');
 336:	6f e6       	ldi	r22, 0x6F	; 111
 338:	70 e0       	ldi	r23, 0x00	; 0
 33a:	88 e0       	ldi	r24, 0x08	; 8
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(9,'u');
 342:	65 e7       	ldi	r22, 0x75	; 117
 344:	70 e0       	ldi	r23, 0x00	; 0
 346:	89 e0       	ldi	r24, 0x09	; 9
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	//Good Job
	EEPROM_Write_Byte(10,'G');
 34e:	67 e4       	ldi	r22, 0x47	; 71
 350:	70 e0       	ldi	r23, 0x00	; 0
 352:	8a e0       	ldi	r24, 0x0A	; 10
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(11,'o');
 35a:	6f e6       	ldi	r22, 0x6F	; 111
 35c:	70 e0       	ldi	r23, 0x00	; 0
 35e:	8b e0       	ldi	r24, 0x0B	; 11
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(12,'o');
 366:	6f e6       	ldi	r22, 0x6F	; 111
 368:	70 e0       	ldi	r23, 0x00	; 0
 36a:	8c e0       	ldi	r24, 0x0C	; 12
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(13,'d');
 372:	64 e6       	ldi	r22, 0x64	; 100
 374:	70 e0       	ldi	r23, 0x00	; 0
 376:	8d e0       	ldi	r24, 0x0D	; 13
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(14,' ');
 37e:	60 e2       	ldi	r22, 0x20	; 32
 380:	70 e0       	ldi	r23, 0x00	; 0
 382:	8e e0       	ldi	r24, 0x0E	; 14
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(15,'J');
 38a:	6a e4       	ldi	r22, 0x4A	; 74
 38c:	70 e0       	ldi	r23, 0x00	; 0
 38e:	8f e0       	ldi	r24, 0x0F	; 15
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(16,'o');
 396:	6f e6       	ldi	r22, 0x6F	; 111
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	80 e1       	ldi	r24, 0x10	; 16
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(17,'b');
 3a2:	62 e6       	ldi	r22, 0x62	; 98
 3a4:	70 e0       	ldi	r23, 0x00	; 0
 3a6:	81 e1       	ldi	r24, 0x11	; 17
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	//I watch you
	EEPROM_Write_Byte(18,'I');
 3ae:	69 e4       	ldi	r22, 0x49	; 73
 3b0:	70 e0       	ldi	r23, 0x00	; 0
 3b2:	82 e1       	ldi	r24, 0x12	; 18
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(19,' ');
 3ba:	60 e2       	ldi	r22, 0x20	; 32
 3bc:	70 e0       	ldi	r23, 0x00	; 0
 3be:	83 e1       	ldi	r24, 0x13	; 19
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(20,'w');
 3c6:	67 e7       	ldi	r22, 0x77	; 119
 3c8:	70 e0       	ldi	r23, 0x00	; 0
 3ca:	84 e1       	ldi	r24, 0x14	; 20
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(21,'a');
 3d2:	61 e6       	ldi	r22, 0x61	; 97
 3d4:	70 e0       	ldi	r23, 0x00	; 0
 3d6:	85 e1       	ldi	r24, 0x15	; 21
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(22,'t');
 3de:	64 e7       	ldi	r22, 0x74	; 116
 3e0:	70 e0       	ldi	r23, 0x00	; 0
 3e2:	86 e1       	ldi	r24, 0x16	; 22
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(23,'c');
 3ea:	63 e6       	ldi	r22, 0x63	; 99
 3ec:	70 e0       	ldi	r23, 0x00	; 0
 3ee:	87 e1       	ldi	r24, 0x17	; 23
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(24,'h');
 3f6:	68 e6       	ldi	r22, 0x68	; 104
 3f8:	70 e0       	ldi	r23, 0x00	; 0
 3fa:	88 e1       	ldi	r24, 0x18	; 24
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(25,' ');
 402:	60 e2       	ldi	r22, 0x20	; 32
 404:	70 e0       	ldi	r23, 0x00	; 0
 406:	89 e1       	ldi	r24, 0x19	; 25
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(26,'y');
 40e:	69 e7       	ldi	r22, 0x79	; 121
 410:	70 e0       	ldi	r23, 0x00	; 0
 412:	8a e1       	ldi	r24, 0x1A	; 26
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(27,'o');
 41a:	6f e6       	ldi	r22, 0x6F	; 111
 41c:	70 e0       	ldi	r23, 0x00	; 0
 41e:	8b e1       	ldi	r24, 0x1B	; 27
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(28,'u');
 426:	65 e7       	ldi	r22, 0x75	; 117
 428:	70 e0       	ldi	r23, 0x00	; 0
 42a:	8c e1       	ldi	r24, 0x1C	; 28
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	//That is fantastic
	EEPROM_Write_Byte(29,'T');
 432:	64 e5       	ldi	r22, 0x54	; 84
 434:	70 e0       	ldi	r23, 0x00	; 0
 436:	8d e1       	ldi	r24, 0x1D	; 29
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(30,'h');
 43e:	68 e6       	ldi	r22, 0x68	; 104
 440:	70 e0       	ldi	r23, 0x00	; 0
 442:	8e e1       	ldi	r24, 0x1E	; 30
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(31,'a');
 44a:	61 e6       	ldi	r22, 0x61	; 97
 44c:	70 e0       	ldi	r23, 0x00	; 0
 44e:	8f e1       	ldi	r24, 0x1F	; 31
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(32,'t');
 456:	64 e7       	ldi	r22, 0x74	; 116
 458:	70 e0       	ldi	r23, 0x00	; 0
 45a:	80 e2       	ldi	r24, 0x20	; 32
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(33,' ');
 462:	60 e2       	ldi	r22, 0x20	; 32
 464:	70 e0       	ldi	r23, 0x00	; 0
 466:	81 e2       	ldi	r24, 0x21	; 33
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(34,'i');
 46e:	69 e6       	ldi	r22, 0x69	; 105
 470:	70 e0       	ldi	r23, 0x00	; 0
 472:	82 e2       	ldi	r24, 0x22	; 34
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(35,'s');
 47a:	63 e7       	ldi	r22, 0x73	; 115
 47c:	70 e0       	ldi	r23, 0x00	; 0
 47e:	83 e2       	ldi	r24, 0x23	; 35
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(36,' ');
 486:	60 e2       	ldi	r22, 0x20	; 32
 488:	70 e0       	ldi	r23, 0x00	; 0
 48a:	84 e2       	ldi	r24, 0x24	; 36
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(37,'f');
 492:	66 e6       	ldi	r22, 0x66	; 102
 494:	70 e0       	ldi	r23, 0x00	; 0
 496:	85 e2       	ldi	r24, 0x25	; 37
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(38,'a');
 49e:	61 e6       	ldi	r22, 0x61	; 97
 4a0:	70 e0       	ldi	r23, 0x00	; 0
 4a2:	86 e2       	ldi	r24, 0x26	; 38
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(39,'n');
 4aa:	6e e6       	ldi	r22, 0x6E	; 110
 4ac:	70 e0       	ldi	r23, 0x00	; 0
 4ae:	87 e2       	ldi	r24, 0x27	; 39
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(40,'t');
 4b6:	64 e7       	ldi	r22, 0x74	; 116
 4b8:	70 e0       	ldi	r23, 0x00	; 0
 4ba:	88 e2       	ldi	r24, 0x28	; 40
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(41,'a');
 4c2:	61 e6       	ldi	r22, 0x61	; 97
 4c4:	70 e0       	ldi	r23, 0x00	; 0
 4c6:	89 e2       	ldi	r24, 0x29	; 41
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(42,'s');
 4ce:	63 e7       	ldi	r22, 0x73	; 115
 4d0:	70 e0       	ldi	r23, 0x00	; 0
 4d2:	8a e2       	ldi	r24, 0x2A	; 42
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(43,'t');
 4da:	64 e7       	ldi	r22, 0x74	; 116
 4dc:	70 e0       	ldi	r23, 0x00	; 0
 4de:	8b e2       	ldi	r24, 0x2B	; 43
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(44,'i');
 4e6:	69 e6       	ldi	r22, 0x69	; 105
 4e8:	70 e0       	ldi	r23, 0x00	; 0
 4ea:	8c e2       	ldi	r24, 0x2C	; 44
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(45,'c');
 4f2:	63 e6       	ldi	r22, 0x63	; 99
 4f4:	70 e0       	ldi	r23, 0x00	; 0
 4f6:	8d e2       	ldi	r24, 0x2D	; 45
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	//I wish you good life
	EEPROM_Write_Byte(46,'I');
 4fe:	69 e4       	ldi	r22, 0x49	; 73
 500:	70 e0       	ldi	r23, 0x00	; 0
 502:	8e e2       	ldi	r24, 0x2E	; 46
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(47,' ');
 50a:	60 e2       	ldi	r22, 0x20	; 32
 50c:	70 e0       	ldi	r23, 0x00	; 0
 50e:	8f e2       	ldi	r24, 0x2F	; 47
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(48,'w');
 516:	67 e7       	ldi	r22, 0x77	; 119
 518:	70 e0       	ldi	r23, 0x00	; 0
 51a:	80 e3       	ldi	r24, 0x30	; 48
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(49,'i');
 522:	69 e6       	ldi	r22, 0x69	; 105
 524:	70 e0       	ldi	r23, 0x00	; 0
 526:	81 e3       	ldi	r24, 0x31	; 49
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(50,'s');
 52e:	63 e7       	ldi	r22, 0x73	; 115
 530:	70 e0       	ldi	r23, 0x00	; 0
 532:	82 e3       	ldi	r24, 0x32	; 50
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(51,'h');
 53a:	68 e6       	ldi	r22, 0x68	; 104
 53c:	70 e0       	ldi	r23, 0x00	; 0
 53e:	83 e3       	ldi	r24, 0x33	; 51
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(52,' ');
 546:	60 e2       	ldi	r22, 0x20	; 32
 548:	70 e0       	ldi	r23, 0x00	; 0
 54a:	84 e3       	ldi	r24, 0x34	; 52
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(53,'y');
 552:	69 e7       	ldi	r22, 0x79	; 121
 554:	70 e0       	ldi	r23, 0x00	; 0
 556:	85 e3       	ldi	r24, 0x35	; 53
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(54,'o');
 55e:	6f e6       	ldi	r22, 0x6F	; 111
 560:	70 e0       	ldi	r23, 0x00	; 0
 562:	86 e3       	ldi	r24, 0x36	; 54
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(55,'u');
 56a:	65 e7       	ldi	r22, 0x75	; 117
 56c:	70 e0       	ldi	r23, 0x00	; 0
 56e:	87 e3       	ldi	r24, 0x37	; 55
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(56,' ');
 576:	60 e2       	ldi	r22, 0x20	; 32
 578:	70 e0       	ldi	r23, 0x00	; 0
 57a:	88 e3       	ldi	r24, 0x38	; 56
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(57,'g');
 582:	67 e6       	ldi	r22, 0x67	; 103
 584:	70 e0       	ldi	r23, 0x00	; 0
 586:	89 e3       	ldi	r24, 0x39	; 57
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(58,'o');
 58e:	6f e6       	ldi	r22, 0x6F	; 111
 590:	70 e0       	ldi	r23, 0x00	; 0
 592:	8a e3       	ldi	r24, 0x3A	; 58
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(59,'o');
 59a:	6f e6       	ldi	r22, 0x6F	; 111
 59c:	70 e0       	ldi	r23, 0x00	; 0
 59e:	8b e3       	ldi	r24, 0x3B	; 59
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(60,'d');
 5a6:	64 e6       	ldi	r22, 0x64	; 100
 5a8:	70 e0       	ldi	r23, 0x00	; 0
 5aa:	8c e3       	ldi	r24, 0x3C	; 60
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(61,' ');
 5b2:	60 e2       	ldi	r22, 0x20	; 32
 5b4:	70 e0       	ldi	r23, 0x00	; 0
 5b6:	8d e3       	ldi	r24, 0x3D	; 61
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(62,'l');
 5be:	6c e6       	ldi	r22, 0x6C	; 108
 5c0:	70 e0       	ldi	r23, 0x00	; 0
 5c2:	8e e3       	ldi	r24, 0x3E	; 62
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(63,'i');
 5ca:	69 e6       	ldi	r22, 0x69	; 105
 5cc:	70 e0       	ldi	r23, 0x00	; 0
 5ce:	8f e3       	ldi	r24, 0x3F	; 63
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(64,'f');
 5d6:	66 e6       	ldi	r22, 0x66	; 102
 5d8:	70 e0       	ldi	r23, 0x00	; 0
 5da:	80 e4       	ldi	r24, 0x40	; 64
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(65,'e');
 5e2:	65 e6       	ldi	r22, 0x65	; 101
 5e4:	70 e0       	ldi	r23, 0x00	; 0
 5e6:	81 e4       	ldi	r24, 0x41	; 65
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	//I really love you
	EEPROM_Write_Byte(66,'I');
 5ee:	69 e4       	ldi	r22, 0x49	; 73
 5f0:	70 e0       	ldi	r23, 0x00	; 0
 5f2:	82 e4       	ldi	r24, 0x42	; 66
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(67,' ');
 5fa:	60 e2       	ldi	r22, 0x20	; 32
 5fc:	70 e0       	ldi	r23, 0x00	; 0
 5fe:	83 e4       	ldi	r24, 0x43	; 67
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(68,'r');
 606:	62 e7       	ldi	r22, 0x72	; 114
 608:	70 e0       	ldi	r23, 0x00	; 0
 60a:	84 e4       	ldi	r24, 0x44	; 68
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(69,'e');
 612:	65 e6       	ldi	r22, 0x65	; 101
 614:	70 e0       	ldi	r23, 0x00	; 0
 616:	85 e4       	ldi	r24, 0x45	; 69
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(70,'a');
 61e:	61 e6       	ldi	r22, 0x61	; 97
 620:	70 e0       	ldi	r23, 0x00	; 0
 622:	86 e4       	ldi	r24, 0x46	; 70
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(71,'l');
 62a:	6c e6       	ldi	r22, 0x6C	; 108
 62c:	70 e0       	ldi	r23, 0x00	; 0
 62e:	87 e4       	ldi	r24, 0x47	; 71
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(72,'l');
 636:	6c e6       	ldi	r22, 0x6C	; 108
 638:	70 e0       	ldi	r23, 0x00	; 0
 63a:	88 e4       	ldi	r24, 0x48	; 72
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(73,'y');
 642:	69 e7       	ldi	r22, 0x79	; 121
 644:	70 e0       	ldi	r23, 0x00	; 0
 646:	89 e4       	ldi	r24, 0x49	; 73
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(74,' ');
 64e:	60 e2       	ldi	r22, 0x20	; 32
 650:	70 e0       	ldi	r23, 0x00	; 0
 652:	8a e4       	ldi	r24, 0x4A	; 74
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(75,'l');
 65a:	6c e6       	ldi	r22, 0x6C	; 108
 65c:	70 e0       	ldi	r23, 0x00	; 0
 65e:	8b e4       	ldi	r24, 0x4B	; 75
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(76,'o');
 666:	6f e6       	ldi	r22, 0x6F	; 111
 668:	70 e0       	ldi	r23, 0x00	; 0
 66a:	8c e4       	ldi	r24, 0x4C	; 76
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(77,'v');
 672:	66 e7       	ldi	r22, 0x76	; 118
 674:	70 e0       	ldi	r23, 0x00	; 0
 676:	8d e4       	ldi	r24, 0x4D	; 77
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(78,'e');
 67e:	65 e6       	ldi	r22, 0x65	; 101
 680:	70 e0       	ldi	r23, 0x00	; 0
 682:	8e e4       	ldi	r24, 0x4E	; 78
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(79,' ');
 68a:	60 e2       	ldi	r22, 0x20	; 32
 68c:	70 e0       	ldi	r23, 0x00	; 0
 68e:	8f e4       	ldi	r24, 0x4F	; 79
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(80,'y');
 696:	69 e7       	ldi	r22, 0x79	; 121
 698:	70 e0       	ldi	r23, 0x00	; 0
 69a:	80 e5       	ldi	r24, 0x50	; 80
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(81,'o');
 6a2:	6f e6       	ldi	r22, 0x6F	; 111
 6a4:	70 e0       	ldi	r23, 0x00	; 0
 6a6:	81 e5       	ldi	r24, 0x51	; 81
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(82,'u');
 6ae:	65 e7       	ldi	r22, 0x75	; 117
 6b0:	70 e0       	ldi	r23, 0x00	; 0
 6b2:	82 e5       	ldi	r24, 0x52	; 82
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	//You
	EEPROM_Write_Byte(83,'Y');
 6ba:	69 e5       	ldi	r22, 0x59	; 89
 6bc:	70 e0       	ldi	r23, 0x00	; 0
 6be:	83 e5       	ldi	r24, 0x53	; 83
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(84,'o');
 6c6:	6f e6       	ldi	r22, 0x6F	; 111
 6c8:	70 e0       	ldi	r23, 0x00	; 0
 6ca:	84 e5       	ldi	r24, 0x54	; 84
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
	EEPROM_Write_Byte(85,'u');
 6d2:	65 e7       	ldi	r22, 0x75	; 117
 6d4:	70 e0       	ldi	r23, 0x00	; 0
 6d6:	85 e5       	ldi	r24, 0x55	; 85
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_Write_Byte>
 6de:	08 95       	ret

000006e0 <GDF_PinDirectionInit>:


void GDF_PinDirectionInit(void)
{
	                 /*  ADC CHANNELS PINS */
	DIO_setPinDirection( DIO_PORTA , DIO_PIN0 , DIO_PIN_INPUT );//Channel 0
 6e0:	40 e0       	ldi	r20, 0x00	; 0
 6e2:	60 e0       	ldi	r22, 0x00	; 0
 6e4:	80 e0       	ldi	r24, 0x00	; 0
 6e6:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_setPinDirection>
	DIO_setPinDirection( DIO_PORTA , DIO_PIN1 , DIO_PIN_INPUT );//Channel 1
 6ea:	40 e0       	ldi	r20, 0x00	; 0
 6ec:	61 e0       	ldi	r22, 0x01	; 1
 6ee:	80 e0       	ldi	r24, 0x00	; 0
 6f0:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_setPinDirection>
	DIO_setPinDirection( DIO_PORTA , DIO_PIN2 , DIO_PIN_INPUT );//Channel 2
 6f4:	40 e0       	ldi	r20, 0x00	; 0
 6f6:	62 e0       	ldi	r22, 0x02	; 2
 6f8:	80 e0       	ldi	r24, 0x00	; 0
 6fa:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_setPinDirection>
	DIO_setPinDirection( DIO_PORTA , DIO_PIN3 , DIO_PIN_INPUT );//Channel 3
 6fe:	40 e0       	ldi	r20, 0x00	; 0
 700:	63 e0       	ldi	r22, 0x03	; 3
 702:	80 e0       	ldi	r24, 0x00	; 0
 704:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_setPinDirection>
    DIO_setPinDirection( DIO_PORTA , DIO_PIN4 , DIO_PIN_INPUT );//Channel 4
 708:	40 e0       	ldi	r20, 0x00	; 0
 70a:	64 e0       	ldi	r22, 0x04	; 4
 70c:	80 e0       	ldi	r24, 0x00	; 0
 70e:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_setPinDirection>

                       /*     LCD PINS      */
    DIO_setPinDirection(DIO_PORTC,DIO_PIN4,DIO_PIN_OUTPUT);
 712:	41 e0       	ldi	r20, 0x01	; 1
 714:	64 e0       	ldi	r22, 0x04	; 4
 716:	82 e0       	ldi	r24, 0x02	; 2
 718:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_setPinDirection>
    DIO_setPinDirection(DIO_PORTC,DIO_PIN5,DIO_PIN_OUTPUT);
 71c:	41 e0       	ldi	r20, 0x01	; 1
 71e:	65 e0       	ldi	r22, 0x05	; 5
 720:	82 e0       	ldi	r24, 0x02	; 2
 722:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_setPinDirection>
    DIO_setPinDirection(DIO_PORTC,DIO_PIN6,DIO_PIN_OUTPUT);
 726:	41 e0       	ldi	r20, 0x01	; 1
 728:	66 e0       	ldi	r22, 0x06	; 6
 72a:	82 e0       	ldi	r24, 0x02	; 2
 72c:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_setPinDirection>
    DIO_setPinDirection(DIO_PORTC,DIO_PIN7,DIO_PIN_OUTPUT);
 730:	41 e0       	ldi	r20, 0x01	; 1
 732:	67 e0       	ldi	r22, 0x07	; 7
 734:	82 e0       	ldi	r24, 0x02	; 2
 736:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_setPinDirection>
    DIO_setPinDirection(DIO_PORTB,DIO_PIN1,DIO_PIN_OUTPUT);
 73a:	41 e0       	ldi	r20, 0x01	; 1
 73c:	61 e0       	ldi	r22, 0x01	; 1
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_setPinDirection>
    DIO_setPinDirection(DIO_PORTB,DIO_PIN2,DIO_PIN_OUTPUT);
 744:	41 e0       	ldi	r20, 0x01	; 1
 746:	62 e0       	ldi	r22, 0x02	; 2
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_setPinDirection>
    DIO_setPinDirection(DIO_PORTB,DIO_PIN3,DIO_PIN_OUTPUT);
 74e:	41 e0       	ldi	r20, 0x01	; 1
 750:	63 e0       	ldi	r22, 0x03	; 3
 752:	81 e0       	ldi	r24, 0x01	; 1
 754:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_setPinDirection>
 758:	08 95       	ret

0000075a <GDF_MainCode>:
	 
}

void GDF_MainCode(void)
{
 75a:	cf 93       	push	r28
 75c:	df 93       	push	r29
 75e:	cd b7       	in	r28, 0x3d	; 61
 760:	de b7       	in	r29, 0x3e	; 62
 762:	a7 97       	sbiw	r28, 0x27	; 39
 764:	0f b6       	in	r0, 0x3f	; 63
 766:	f8 94       	cli
 768:	de bf       	out	0x3e, r29	; 62
 76a:	0f be       	out	0x3f, r0	; 63
 76c:	cd bf       	out	0x3d, r28	; 61
	u16 Analog_Thumb
	 ,  Analog_Index_Finger
	 ,  Analog_Middle_Finger
	 ,  Analog_Ring_Finger
	 ,  Analog_Little_Finger ;
	savingSentences();  
 76e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <savingSentences>
	ADC_init(); // Initializing ADC 
 772:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_init>
	LCD_init(); // Initializing LCD
 776:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCD_init>
	while (1)
	{ 
		                    /* Value of THIMB */
		ADC_getDigitalValue( ADC_SINGLE_ENDED_CHANNEL_0 , &Digital_Thumb         );
 77a:	be 01       	movw	r22, r28
 77c:	6f 5f       	subi	r22, 0xFF	; 255
 77e:	7f 4f       	sbci	r23, 0xFF	; 255
 780:	80 e0       	ldi	r24, 0x00	; 0
 782:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_getDigitalValue>
		Analog_Thumb = (( (u32)Digital_Thumb * 5000UL )/1024 );//digital * stepsize ( 5v->5000mv  )
 786:	29 81       	ldd	r18, Y+1	; 0x01
 788:	3a 81       	ldd	r19, Y+2	; 0x02
 78a:	a8 e8       	ldi	r26, 0x88	; 136
 78c:	b3 e1       	ldi	r27, 0x13	; 19
 78e:	0e 94 62 07 	call	0xec4	; 0xec4 <__umulhisi3>
 792:	6b 01       	movw	r12, r22
 794:	7c 01       	movw	r14, r24
 796:	0b 2e       	mov	r0, r27
 798:	ba e0       	ldi	r27, 0x0A	; 10
 79a:	f6 94       	lsr	r15
 79c:	e7 94       	ror	r14
 79e:	d7 94       	ror	r13
 7a0:	c7 94       	ror	r12
 7a2:	ba 95       	dec	r27
 7a4:	d1 f7       	brne	.-12     	; 0x79a <GDF_MainCode+0x40>
 7a6:	b0 2d       	mov	r27, r0
 7a8:	86 01       	movw	r16, r12
		                   /* Value of INDEX Finger */
		ADC_getDigitalValue( ADC_SINGLE_ENDED_CHANNEL_1 , &Digital_Index_Finger  );
 7aa:	be 01       	movw	r22, r28
 7ac:	6d 5f       	subi	r22, 0xFD	; 253
 7ae:	7f 4f       	sbci	r23, 0xFF	; 255
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_getDigitalValue>
		Analog_Index_Finger = (( (u32) Digital_Index_Finger * 5000UL )/1024 );//digital * stepsize ( 5v->5000mv  )
 7b6:	2b 81       	ldd	r18, Y+3	; 0x03
 7b8:	3c 81       	ldd	r19, Y+4	; 0x04
 7ba:	a8 e8       	ldi	r26, 0x88	; 136
 7bc:	b3 e1       	ldi	r27, 0x13	; 19
 7be:	0e 94 62 07 	call	0xec4	; 0xec4 <__umulhisi3>
 7c2:	4b 01       	movw	r8, r22
 7c4:	5c 01       	movw	r10, r24
 7c6:	07 2e       	mov	r0, r23
 7c8:	7a e0       	ldi	r23, 0x0A	; 10
 7ca:	b6 94       	lsr	r11
 7cc:	a7 94       	ror	r10
 7ce:	97 94       	ror	r9
 7d0:	87 94       	ror	r8
 7d2:	7a 95       	dec	r23
 7d4:	d1 f7       	brne	.-12     	; 0x7ca <GDF_MainCode+0x70>
 7d6:	70 2d       	mov	r23, r0
 7d8:	14 01       	movw	r2, r8
		                    /* Value of MIDDLE Finger */
		ADC_getDigitalValue( ADC_SINGLE_ENDED_CHANNEL_2 , &Digital_Middle_Finger );
 7da:	be 01       	movw	r22, r28
 7dc:	6b 5f       	subi	r22, 0xFB	; 251
 7de:	7f 4f       	sbci	r23, 0xFF	; 255
 7e0:	82 e0       	ldi	r24, 0x02	; 2
 7e2:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_getDigitalValue>
		Analog_Middle_Finger = (( (u32)Digital_Middle_Finger * 5000UL )/1024 );//digital * stepsize ( 5v->5000mv  )
 7e6:	2d 81       	ldd	r18, Y+5	; 0x05
 7e8:	3e 81       	ldd	r19, Y+6	; 0x06
 7ea:	a8 e8       	ldi	r26, 0x88	; 136
 7ec:	b3 e1       	ldi	r27, 0x13	; 19
 7ee:	0e 94 62 07 	call	0xec4	; 0xec4 <__umulhisi3>
 7f2:	2b 01       	movw	r4, r22
 7f4:	3c 01       	movw	r6, r24
 7f6:	03 2e       	mov	r0, r19
 7f8:	3a e0       	ldi	r19, 0x0A	; 10
 7fa:	76 94       	lsr	r7
 7fc:	67 94       	ror	r6
 7fe:	57 94       	ror	r5
 800:	47 94       	ror	r4
 802:	3a 95       	dec	r19
 804:	d1 f7       	brne	.-12     	; 0x7fa <GDF_MainCode+0xa0>
 806:	30 2d       	mov	r19, r0
 808:	5d a2       	std	Y+37, r5	; 0x25
 80a:	4c a2       	std	Y+36, r4	; 0x24
		                    /* Value of RING Finger */
		ADC_getDigitalValue( ADC_SINGLE_ENDED_CHANNEL_3 , &Digital_Ring_Finger   );
 80c:	be 01       	movw	r22, r28
 80e:	69 5f       	subi	r22, 0xF9	; 249
 810:	7f 4f       	sbci	r23, 0xFF	; 255
 812:	83 e0       	ldi	r24, 0x03	; 3
 814:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_getDigitalValue>
		Analog_Ring_Finger = (( (u32)Digital_Ring_Finger * 5000UL )/1024 );//digital * stepsize ( 5v->5000mv  )
 818:	2f 81       	ldd	r18, Y+7	; 0x07
 81a:	38 85       	ldd	r19, Y+8	; 0x08
 81c:	a8 e8       	ldi	r26, 0x88	; 136
 81e:	b3 e1       	ldi	r27, 0x13	; 19
 820:	0e 94 62 07 	call	0xec4	; 0xec4 <__umulhisi3>
 824:	9b 01       	movw	r18, r22
 826:	ac 01       	movw	r20, r24
 828:	01 2e       	mov	r0, r17
 82a:	1a e0       	ldi	r17, 0x0A	; 10
 82c:	56 95       	lsr	r21
 82e:	47 95       	ror	r20
 830:	37 95       	ror	r19
 832:	27 95       	ror	r18
 834:	1a 95       	dec	r17
 836:	d1 f7       	brne	.-12     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 838:	10 2d       	mov	r17, r0
 83a:	28 a3       	std	Y+32, r18	; 0x20
 83c:	39 a3       	std	Y+33, r19	; 0x21
 83e:	4a a3       	std	Y+34, r20	; 0x22
 840:	5b a3       	std	Y+35, r21	; 0x23
 842:	48 a1       	ldd	r20, Y+32	; 0x20
 844:	59 a1       	ldd	r21, Y+33	; 0x21
 846:	5f a3       	std	Y+39, r21	; 0x27
 848:	4e a3       	std	Y+38, r20	; 0x26
		                    /* Value of LITTLE Finger */
		ADC_getDigitalValue( ADC_SINGLE_ENDED_CHANNEL_4 , &Digital_Little_Finger );
 84a:	be 01       	movw	r22, r28
 84c:	67 5f       	subi	r22, 0xF7	; 247
 84e:	7f 4f       	sbci	r23, 0xFF	; 255
 850:	84 e0       	ldi	r24, 0x04	; 4
 852:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_getDigitalValue>
		Analog_Little_Finger = (( (u32)Digital_Little_Finger * 5000UL )/1024 );//digital * stepsize ( 5v->5000mv  )
 856:	29 85       	ldd	r18, Y+9	; 0x09
 858:	3a 85       	ldd	r19, Y+10	; 0x0a
 85a:	a8 e8       	ldi	r26, 0x88	; 136
 85c:	b3 e1       	ldi	r27, 0x13	; 19
 85e:	0e 94 62 07 	call	0xec4	; 0xec4 <__umulhisi3>
 862:	ab 01       	movw	r20, r22
 864:	bc 01       	movw	r22, r24
 866:	03 2e       	mov	r0, r19
 868:	3a e0       	ldi	r19, 0x0A	; 10
 86a:	76 95       	lsr	r23
 86c:	67 95       	ror	r22
 86e:	57 95       	ror	r21
 870:	47 95       	ror	r20
 872:	3a 95       	dec	r19
 874:	d1 f7       	brne	.-12     	; 0x86a <__stack+0xb>
 876:	30 2d       	mov	r19, r0
 878:	9a 01       	movw	r18, r20
		
		if (  (Analog_Thumb < 625  ) && (Analog_Index_Finger < 625  ) && (Analog_Middle_Finger < 625 )  &&  ( Analog_Ring_Finger  < 625 )  &&  ( Analog_Little_Finger < 625 )   )//All fingers Flat
 87a:	81 e7       	ldi	r24, 0x71	; 113
 87c:	c8 16       	cp	r12, r24
 87e:	82 e0       	ldi	r24, 0x02	; 2
 880:	d8 06       	cpc	r13, r24
 882:	b8 f5       	brcc	.+110    	; 0x8f2 <__stack+0x93>
 884:	91 e7       	ldi	r25, 0x71	; 113
 886:	89 16       	cp	r8, r25
 888:	92 e0       	ldi	r25, 0x02	; 2
 88a:	99 06       	cpc	r9, r25
 88c:	90 f5       	brcc	.+100    	; 0x8f2 <__stack+0x93>
 88e:	8c a1       	ldd	r24, Y+36	; 0x24
 890:	9d a1       	ldd	r25, Y+37	; 0x25
 892:	81 37       	cpi	r24, 0x71	; 113
 894:	92 40       	sbci	r25, 0x02	; 2
 896:	68 f5       	brcc	.+90     	; 0x8f2 <__stack+0x93>
 898:	8e a1       	ldd	r24, Y+38	; 0x26
 89a:	9f a1       	ldd	r25, Y+39	; 0x27
 89c:	81 37       	cpi	r24, 0x71	; 113
 89e:	92 40       	sbci	r25, 0x02	; 2
 8a0:	40 f5       	brcc	.+80     	; 0x8f2 <__stack+0x93>
 8a2:	41 37       	cpi	r20, 0x71	; 113
 8a4:	82 e0       	ldi	r24, 0x02	; 2
 8a6:	58 07       	cpc	r21, r24
 8a8:	20 f5       	brcc	.+72     	; 0x8f2 <__stack+0x93>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8aa:	9f ef       	ldi	r25, 0xFF	; 255
 8ac:	e3 ed       	ldi	r30, 0xD3	; 211
 8ae:	20 e3       	ldi	r18, 0x30	; 48
 8b0:	91 50       	subi	r25, 0x01	; 1
 8b2:	e0 40       	sbci	r30, 0x00	; 0
 8b4:	20 40       	sbci	r18, 0x00	; 0
 8b6:	e1 f7       	brne	.-8      	; 0x8b0 <__stack+0x51>
 8b8:	00 c0       	rjmp	.+0      	; 0x8ba <__stack+0x5b>
 8ba:	00 00       	nop
		{  
			 _delay_ms(1000);
			LCD_clear(); //Clear LCD 
 8bc:	0e 94 50 07 	call	0xea0	; 0xea0 <LCD_clear>
			//SENTENCE FROM EEPROM CORRESPONDING TO THE RELATIVE VALUES TO BE PRINTED ON THE LCD " I wish you a good life " 
			u8 st[21];
			st[20] = '\0';
 8c0:	1f 8e       	std	Y+31, r1	; 0x1f
			for(u8 i = 0; i <= 19; i++)
 8c2:	f1 2c       	mov	r15, r1
 8c4:	0e c0       	rjmp	.+28     	; 0x8e2 <__stack+0x83>
			{
				st[i] = EEPROM_Read_Byte(i+46);
 8c6:	0f 2d       	mov	r16, r15
 8c8:	10 e0       	ldi	r17, 0x00	; 0
 8ca:	c8 01       	movw	r24, r16
 8cc:	8e 96       	adiw	r24, 0x2e	; 46
 8ce:	0e 94 61 01 	call	0x2c2	; 0x2c2 <EEPROM_Read_Byte>
 8d2:	eb e0       	ldi	r30, 0x0B	; 11
 8d4:	f0 e0       	ldi	r31, 0x00	; 0
 8d6:	ec 0f       	add	r30, r28
 8d8:	fd 1f       	adc	r31, r29
 8da:	e0 0f       	add	r30, r16
 8dc:	f1 1f       	adc	r31, r17
 8de:	80 83       	st	Z, r24
			 _delay_ms(1000);
			LCD_clear(); //Clear LCD 
			//SENTENCE FROM EEPROM CORRESPONDING TO THE RELATIVE VALUES TO BE PRINTED ON THE LCD " I wish you a good life " 
			u8 st[21];
			st[20] = '\0';
			for(u8 i = 0; i <= 19; i++)
 8e0:	f3 94       	inc	r15
 8e2:	33 e1       	ldi	r19, 0x13	; 19
 8e4:	3f 15       	cp	r19, r15
 8e6:	78 f7       	brcc	.-34     	; 0x8c6 <__stack+0x67>
			{
				st[i] = EEPROM_Read_Byte(i+46);
			};
			
			LCD_display(st); //I wish you good life
 8e8:	ce 01       	movw	r24, r28
 8ea:	0b 96       	adiw	r24, 0x0b	; 11
 8ec:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <LCD_display>
		                    /* Value of LITTLE Finger */
		ADC_getDigitalValue( ADC_SINGLE_ENDED_CHANNEL_4 , &Digital_Little_Finger );
		Analog_Little_Finger = (( (u32)Digital_Little_Finger * 5000UL )/1024 );//digital * stepsize ( 5v->5000mv  )
		
		if (  (Analog_Thumb < 625  ) && (Analog_Index_Finger < 625  ) && (Analog_Middle_Finger < 625 )  &&  ( Analog_Ring_Finger  < 625 )  &&  ( Analog_Little_Finger < 625 )   )//All fingers Flat
		{  
 8f0:	44 cf       	rjmp	.-376    	; 0x77a <GDF_MainCode+0x20>
			};
			
			LCD_display(st); //I wish you good life
			
		}
		else if (  (Analog_Thumb < 625 ) && (Analog_Index_Finger < 625 ) && ( (3125 < Analog_Middle_Finger ) && (Analog_Middle_Finger < 5000 ) ) &&  ( (3125 < Analog_Ring_Finger)&& (Analog_Ring_Finger < 5000 ) ) &&  ( Analog_Little_Finger < 625 )   )//All fingers flat except middle and ring are totally bended
 8f2:	01 37       	cpi	r16, 0x71	; 113
 8f4:	82 e0       	ldi	r24, 0x02	; 2
 8f6:	18 07       	cpc	r17, r24
 8f8:	c8 f5       	brcc	.+114    	; 0x96c <__stack+0x10d>
 8fa:	91 e7       	ldi	r25, 0x71	; 113
 8fc:	29 16       	cp	r2, r25
 8fe:	92 e0       	ldi	r25, 0x02	; 2
 900:	39 06       	cpc	r3, r25
 902:	a0 f5       	brcc	.+104    	; 0x96c <__stack+0x10d>
 904:	c2 01       	movw	r24, r4
 906:	86 53       	subi	r24, 0x36	; 54
 908:	9c 40       	sbci	r25, 0x0C	; 12
 90a:	82 35       	cpi	r24, 0x52	; 82
 90c:	97 40       	sbci	r25, 0x07	; 7
 90e:	70 f5       	brcc	.+92     	; 0x96c <__stack+0x10d>
 910:	88 a1       	ldd	r24, Y+32	; 0x20
 912:	99 a1       	ldd	r25, Y+33	; 0x21
 914:	86 53       	subi	r24, 0x36	; 54
 916:	9c 40       	sbci	r25, 0x0C	; 12
 918:	82 35       	cpi	r24, 0x52	; 82
 91a:	97 40       	sbci	r25, 0x07	; 7
 91c:	38 f5       	brcc	.+78     	; 0x96c <__stack+0x10d>
 91e:	21 37       	cpi	r18, 0x71	; 113
 920:	82 e0       	ldi	r24, 0x02	; 2
 922:	38 07       	cpc	r19, r24
 924:	18 f5       	brcc	.+70     	; 0x96c <__stack+0x10d>
 926:	9f ef       	ldi	r25, 0xFF	; 255
 928:	e3 ed       	ldi	r30, 0xD3	; 211
 92a:	20 e3       	ldi	r18, 0x30	; 48
 92c:	91 50       	subi	r25, 0x01	; 1
 92e:	e0 40       	sbci	r30, 0x00	; 0
 930:	20 40       	sbci	r18, 0x00	; 0
 932:	e1 f7       	brne	.-8      	; 0x92c <__stack+0xcd>
 934:	00 c0       	rjmp	.+0      	; 0x936 <__stack+0xd7>
 936:	00 00       	nop
		{
			_delay_ms(1000);
			LCD_clear();//Clear LCD
 938:	0e 94 50 07 	call	0xea0	; 0xea0 <LCD_clear>
			
			//SENTENCE FROM EEPROM CORRESPONDING TO THE RELATIVE VALUES TO BE PRINTED ON THE LCD "I love you "
			
			u8 st[10];
			st[9] = '\0';
 93c:	1c 8a       	std	Y+20, r1	; 0x14
			for(u8 i = 0; i <= 9; i++)
 93e:	f1 2c       	mov	r15, r1
 940:	0d c0       	rjmp	.+26     	; 0x95c <__stack+0xfd>
			{
				st[i] = EEPROM_Read_Byte(i);
 942:	0f 2d       	mov	r16, r15
 944:	10 e0       	ldi	r17, 0x00	; 0
 946:	c8 01       	movw	r24, r16
 948:	0e 94 61 01 	call	0x2c2	; 0x2c2 <EEPROM_Read_Byte>
 94c:	eb e0       	ldi	r30, 0x0B	; 11
 94e:	f0 e0       	ldi	r31, 0x00	; 0
 950:	ec 0f       	add	r30, r28
 952:	fd 1f       	adc	r31, r29
 954:	e0 0f       	add	r30, r16
 956:	f1 1f       	adc	r31, r17
 958:	80 83       	st	Z, r24
			
			//SENTENCE FROM EEPROM CORRESPONDING TO THE RELATIVE VALUES TO BE PRINTED ON THE LCD "I love you "
			
			u8 st[10];
			st[9] = '\0';
			for(u8 i = 0; i <= 9; i++)
 95a:	f3 94       	inc	r15
 95c:	39 e0       	ldi	r19, 0x09	; 9
 95e:	3f 15       	cp	r19, r15
 960:	80 f7       	brcc	.-32     	; 0x942 <__stack+0xe3>
			{
				st[i] = EEPROM_Read_Byte(i);
			};
			
			LCD_display(st); //I love you
 962:	ce 01       	movw	r24, r28
 964:	0b 96       	adiw	r24, 0x0b	; 11
 966:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <LCD_display>
			
			LCD_display(st); //I wish you good life
			
		}
		else if (  (Analog_Thumb < 625 ) && (Analog_Index_Finger < 625 ) && ( (3125 < Analog_Middle_Finger ) && (Analog_Middle_Finger < 5000 ) ) &&  ( (3125 < Analog_Ring_Finger)&& (Analog_Ring_Finger < 5000 ) ) &&  ( Analog_Little_Finger < 625 )   )//All fingers flat except middle and ring are totally bended
		{
 96a:	07 cf       	rjmp	.-498    	; 0x77a <GDF_MainCode+0x20>
			};
			
			LCD_display(st); //I love you

		}
		else if ( ( ( 3125 < Analog_Thumb )&& (Analog_Thumb < 5000 ) ) && (Analog_Index_Finger < 625 ) && ( (3125 < Analog_Middle_Finger ) && (Analog_Middle_Finger < 5000 ) )  &&  ( (3125 < Analog_Ring_Finger)&& (Analog_Ring_Finger < 5000 ) )  &&  ( Analog_Little_Finger < 625 )   )////All fingers flat except middle, ring and thumb are totally bended
 96c:	86 e3       	ldi	r24, 0x36	; 54
 96e:	c8 1a       	sub	r12, r24
 970:	8c e0       	ldi	r24, 0x0C	; 12
 972:	d8 0a       	sbc	r13, r24
 974:	92 e5       	ldi	r25, 0x52	; 82
 976:	c9 16       	cp	r12, r25
 978:	97 e0       	ldi	r25, 0x07	; 7
 97a:	d9 06       	cpc	r13, r25
 97c:	d0 f5       	brcc	.+116    	; 0x9f2 <__stack+0x193>
 97e:	e1 e7       	ldi	r30, 0x71	; 113
 980:	2e 16       	cp	r2, r30
 982:	e2 e0       	ldi	r30, 0x02	; 2
 984:	3e 06       	cpc	r3, r30
 986:	a8 f5       	brcc	.+106    	; 0x9f2 <__stack+0x193>
 988:	c2 01       	movw	r24, r4
 98a:	86 53       	subi	r24, 0x36	; 54
 98c:	9c 40       	sbci	r25, 0x0C	; 12
 98e:	82 35       	cpi	r24, 0x52	; 82
 990:	97 40       	sbci	r25, 0x07	; 7
 992:	78 f5       	brcc	.+94     	; 0x9f2 <__stack+0x193>
 994:	88 a1       	ldd	r24, Y+32	; 0x20
 996:	99 a1       	ldd	r25, Y+33	; 0x21
 998:	86 53       	subi	r24, 0x36	; 54
 99a:	9c 40       	sbci	r25, 0x0C	; 12
 99c:	82 35       	cpi	r24, 0x52	; 82
 99e:	97 40       	sbci	r25, 0x07	; 7
 9a0:	40 f5       	brcc	.+80     	; 0x9f2 <__stack+0x193>
 9a2:	21 37       	cpi	r18, 0x71	; 113
 9a4:	82 e0       	ldi	r24, 0x02	; 2
 9a6:	38 07       	cpc	r19, r24
 9a8:	20 f5       	brcc	.+72     	; 0x9f2 <__stack+0x193>
 9aa:	9f ef       	ldi	r25, 0xFF	; 255
 9ac:	e3 ed       	ldi	r30, 0xD3	; 211
 9ae:	20 e3       	ldi	r18, 0x30	; 48
 9b0:	91 50       	subi	r25, 0x01	; 1
 9b2:	e0 40       	sbci	r30, 0x00	; 0
 9b4:	20 40       	sbci	r18, 0x00	; 0
 9b6:	e1 f7       	brne	.-8      	; 0x9b0 <__stack+0x151>
 9b8:	00 c0       	rjmp	.+0      	; 0x9ba <__stack+0x15b>
 9ba:	00 00       	nop
		{   
			
			 _delay_ms(1000);
			LCD_clear();//Clear LCD
 9bc:	0e 94 50 07 	call	0xea0	; 0xea0 <LCD_clear>
			//SENTENCE FROM EEPROM CORRESPONDING TO THE RELATIVE VALUES TO BE PRINTED ON THE LCD "This is fantastic "
			 u8 st[18];
			 st[17] = '\0';
 9c0:	1c 8e       	std	Y+28, r1	; 0x1c
			 for(u8 i = 0; i <= 16; i++)
 9c2:	f1 2c       	mov	r15, r1
 9c4:	0e c0       	rjmp	.+28     	; 0x9e2 <__stack+0x183>
			 {
				 st[i] = EEPROM_Read_Byte(i+29);
 9c6:	0f 2d       	mov	r16, r15
 9c8:	10 e0       	ldi	r17, 0x00	; 0
 9ca:	c8 01       	movw	r24, r16
 9cc:	4d 96       	adiw	r24, 0x1d	; 29
 9ce:	0e 94 61 01 	call	0x2c2	; 0x2c2 <EEPROM_Read_Byte>
 9d2:	eb e0       	ldi	r30, 0x0B	; 11
 9d4:	f0 e0       	ldi	r31, 0x00	; 0
 9d6:	ec 0f       	add	r30, r28
 9d8:	fd 1f       	adc	r31, r29
 9da:	e0 0f       	add	r30, r16
 9dc:	f1 1f       	adc	r31, r17
 9de:	80 83       	st	Z, r24
			 _delay_ms(1000);
			LCD_clear();//Clear LCD
			//SENTENCE FROM EEPROM CORRESPONDING TO THE RELATIVE VALUES TO BE PRINTED ON THE LCD "This is fantastic "
			 u8 st[18];
			 st[17] = '\0';
			 for(u8 i = 0; i <= 16; i++)
 9e0:	f3 94       	inc	r15
 9e2:	30 e1       	ldi	r19, 0x10	; 16
 9e4:	3f 15       	cp	r19, r15
 9e6:	78 f7       	brcc	.-34     	; 0x9c6 <__stack+0x167>
			 {
				 st[i] = EEPROM_Read_Byte(i+29);
			 };
			 
			 LCD_display(st); //That is fantastic
 9e8:	ce 01       	movw	r24, r28
 9ea:	0b 96       	adiw	r24, 0x0b	; 11
 9ec:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <LCD_display>
			
			LCD_display(st); //I love you

		}
		else if ( ( ( 3125 < Analog_Thumb )&& (Analog_Thumb < 5000 ) ) && (Analog_Index_Finger < 625 ) && ( (3125 < Analog_Middle_Finger ) && (Analog_Middle_Finger < 5000 ) )  &&  ( (3125 < Analog_Ring_Finger)&& (Analog_Ring_Finger < 5000 ) )  &&  ( Analog_Little_Finger < 625 )   )////All fingers flat except middle, ring and thumb are totally bended
		{   
 9f0:	c4 ce       	rjmp	.-632    	; 0x77a <GDF_MainCode+0x20>
			 LCD_display(st); //That is fantastic
			
			
		}
		
		else if (  (Analog_Thumb < 625 ) && (Analog_Index_Finger < 625 ) && (Analog_Middle_Finger < 625 )  &&  ( (3125 < Analog_Ring_Finger)&& (Analog_Ring_Finger < 5000 ) )  &&  ( Analog_Little_Finger < 625 )   )////All fingers flat except ring is totally bended
 9f2:	01 37       	cpi	r16, 0x71	; 113
 9f4:	82 e0       	ldi	r24, 0x02	; 2
 9f6:	18 07       	cpc	r17, r24
 9f8:	c8 f5       	brcc	.+114    	; 0xa6c <__stack+0x20d>
 9fa:	91 e7       	ldi	r25, 0x71	; 113
 9fc:	29 16       	cp	r2, r25
 9fe:	92 e0       	ldi	r25, 0x02	; 2
 a00:	39 06       	cpc	r3, r25
 a02:	a0 f5       	brcc	.+104    	; 0xa6c <__stack+0x20d>
 a04:	8c a1       	ldd	r24, Y+36	; 0x24
 a06:	9d a1       	ldd	r25, Y+37	; 0x25
 a08:	81 37       	cpi	r24, 0x71	; 113
 a0a:	92 40       	sbci	r25, 0x02	; 2
 a0c:	78 f5       	brcc	.+94     	; 0xa6c <__stack+0x20d>
 a0e:	88 a1       	ldd	r24, Y+32	; 0x20
 a10:	99 a1       	ldd	r25, Y+33	; 0x21
 a12:	86 53       	subi	r24, 0x36	; 54
 a14:	9c 40       	sbci	r25, 0x0C	; 12
 a16:	82 35       	cpi	r24, 0x52	; 82
 a18:	97 40       	sbci	r25, 0x07	; 7
 a1a:	40 f5       	brcc	.+80     	; 0xa6c <__stack+0x20d>
 a1c:	21 37       	cpi	r18, 0x71	; 113
 a1e:	32 40       	sbci	r19, 0x02	; 2
 a20:	28 f5       	brcc	.+74     	; 0xa6c <__stack+0x20d>
 a22:	9f ef       	ldi	r25, 0xFF	; 255
 a24:	e3 ed       	ldi	r30, 0xD3	; 211
 a26:	20 e3       	ldi	r18, 0x30	; 48
 a28:	91 50       	subi	r25, 0x01	; 1
 a2a:	e0 40       	sbci	r30, 0x00	; 0
 a2c:	20 40       	sbci	r18, 0x00	; 0
 a2e:	e1 f7       	brne	.-8      	; 0xa28 <__stack+0x1c9>
 a30:	00 c0       	rjmp	.+0      	; 0xa32 <__stack+0x1d3>
 a32:	00 00       	nop
		{   
			
			 _delay_ms(1000);
			 LCD_clear();//Clear LCD
 a34:	0e 94 50 07 	call	0xea0	; 0xea0 <LCD_clear>
			 //SENTENCE FROM EEPROM CORRESPONDING TO THE RELATIVE VALUES TO BE PRINTED ON THE LCD" Really i love you"
			 u8 st[18];
			 st[17] = '\0';
 a38:	1c 8e       	std	Y+28, r1	; 0x1c
			 for(u8 i = 0; i <= 16; i++)
 a3a:	f1 2c       	mov	r15, r1
 a3c:	0f c0       	rjmp	.+30     	; 0xa5c <__stack+0x1fd>
			 {
				 st[i] = EEPROM_Read_Byte(i+66);
 a3e:	0f 2d       	mov	r16, r15
 a40:	10 e0       	ldi	r17, 0x00	; 0
 a42:	c8 01       	movw	r24, r16
 a44:	8e 5b       	subi	r24, 0xBE	; 190
 a46:	9f 4f       	sbci	r25, 0xFF	; 255
 a48:	0e 94 61 01 	call	0x2c2	; 0x2c2 <EEPROM_Read_Byte>
 a4c:	eb e0       	ldi	r30, 0x0B	; 11
 a4e:	f0 e0       	ldi	r31, 0x00	; 0
 a50:	ec 0f       	add	r30, r28
 a52:	fd 1f       	adc	r31, r29
 a54:	e0 0f       	add	r30, r16
 a56:	f1 1f       	adc	r31, r17
 a58:	80 83       	st	Z, r24
			 _delay_ms(1000);
			 LCD_clear();//Clear LCD
			 //SENTENCE FROM EEPROM CORRESPONDING TO THE RELATIVE VALUES TO BE PRINTED ON THE LCD" Really i love you"
			 u8 st[18];
			 st[17] = '\0';
			 for(u8 i = 0; i <= 16; i++)
 a5a:	f3 94       	inc	r15
 a5c:	30 e1       	ldi	r19, 0x10	; 16
 a5e:	3f 15       	cp	r19, r15
 a60:	70 f7       	brcc	.-36     	; 0xa3e <__stack+0x1df>
			 {
				 st[i] = EEPROM_Read_Byte(i+66);
			 }
			 
			 LCD_display(st); //I really love you
 a62:	ce 01       	movw	r24, r28
 a64:	0b 96       	adiw	r24, 0x0b	; 11
 a66:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <LCD_display>
			
			
		}
		
		else if (  (Analog_Thumb < 625 ) && (Analog_Index_Finger < 625 ) && (Analog_Middle_Finger < 625 )  &&  ( (3125 < Analog_Ring_Finger)&& (Analog_Ring_Finger < 5000 ) )  &&  ( Analog_Little_Finger < 625 )   )////All fingers flat except ring is totally bended
		{   
 a6a:	87 ce       	rjmp	.-754    	; 0x77a <GDF_MainCode+0x20>
			 }
			 
			 LCD_display(st); //I really love you
			
		}
		else if ( ( ( 3125 < Analog_Thumb )&&(Analog_Thumb < 5000 ) ) && (( 1125 < Analog_Index_Finger)&&(Analog_Index_Finger < 3125 ) )&& ( (3125 < Analog_Middle_Finger ) && (Analog_Middle_Finger < 5000 ) )  &&  ( (3125 < Analog_Ring_Finger)&& (Analog_Ring_Finger < 5000 ) )  && ( ( 3125 < Analog_Little_Finger)&&(Analog_Little_Finger < 5000 ) )   )//All fingers are bended totally except index is bended by 45 degrees 
 a6c:	82 e5       	ldi	r24, 0x52	; 82
 a6e:	c8 16       	cp	r12, r24
 a70:	87 e0       	ldi	r24, 0x07	; 7
 a72:	d8 06       	cpc	r13, r24
 a74:	f0 f5       	brcc	.+124    	; 0xaf2 <__stack+0x293>
 a76:	c4 01       	movw	r24, r8
 a78:	86 56       	subi	r24, 0x66	; 102
 a7a:	94 40       	sbci	r25, 0x04	; 4
 a7c:	8f 3c       	cpi	r24, 0xCF	; 207
 a7e:	97 40       	sbci	r25, 0x07	; 7
 a80:	c0 f5       	brcc	.+112    	; 0xaf2 <__stack+0x293>
 a82:	c2 01       	movw	r24, r4
 a84:	86 53       	subi	r24, 0x36	; 54
 a86:	9c 40       	sbci	r25, 0x0C	; 12
 a88:	82 35       	cpi	r24, 0x52	; 82
 a8a:	97 40       	sbci	r25, 0x07	; 7
 a8c:	90 f5       	brcc	.+100    	; 0xaf2 <__stack+0x293>
 a8e:	88 a1       	ldd	r24, Y+32	; 0x20
 a90:	99 a1       	ldd	r25, Y+33	; 0x21
 a92:	86 53       	subi	r24, 0x36	; 54
 a94:	9c 40       	sbci	r25, 0x0C	; 12
 a96:	82 35       	cpi	r24, 0x52	; 82
 a98:	97 40       	sbci	r25, 0x07	; 7
 a9a:	58 f5       	brcc	.+86     	; 0xaf2 <__stack+0x293>
 a9c:	ca 01       	movw	r24, r20
 a9e:	86 53       	subi	r24, 0x36	; 54
 aa0:	9c 40       	sbci	r25, 0x0C	; 12
 aa2:	82 35       	cpi	r24, 0x52	; 82
 aa4:	97 40       	sbci	r25, 0x07	; 7
 aa6:	28 f5       	brcc	.+74     	; 0xaf2 <__stack+0x293>
 aa8:	2f ef       	ldi	r18, 0xFF	; 255
 aaa:	33 ed       	ldi	r19, 0xD3	; 211
 aac:	40 e3       	ldi	r20, 0x30	; 48
 aae:	21 50       	subi	r18, 0x01	; 1
 ab0:	30 40       	sbci	r19, 0x00	; 0
 ab2:	40 40       	sbci	r20, 0x00	; 0
 ab4:	e1 f7       	brne	.-8      	; 0xaae <__stack+0x24f>
 ab6:	00 c0       	rjmp	.+0      	; 0xab8 <__stack+0x259>
 ab8:	00 00       	nop
		{   
			
			 _delay_ms(1000);
			 LCD_clear();//Clear LCD
 aba:	0e 94 50 07 	call	0xea0	; 0xea0 <LCD_clear>
			 //SENTENCE FROM EEPROM CORRESPONDING TO THE RELATIVE VALUES TO BE PRINTED ON THE LCD" You "
			
			u8 st[4];
			st[3] = '\0';
 abe:	1e 86       	std	Y+14, r1	; 0x0e
			for(u8 i = 0; i <= 2; i++)
 ac0:	f1 2c       	mov	r15, r1
 ac2:	0f c0       	rjmp	.+30     	; 0xae2 <__stack+0x283>
			{
				st[i] = EEPROM_Read_Byte(i+83);
 ac4:	0f 2d       	mov	r16, r15
 ac6:	10 e0       	ldi	r17, 0x00	; 0
 ac8:	c8 01       	movw	r24, r16
 aca:	8d 5a       	subi	r24, 0xAD	; 173
 acc:	9f 4f       	sbci	r25, 0xFF	; 255
 ace:	0e 94 61 01 	call	0x2c2	; 0x2c2 <EEPROM_Read_Byte>
 ad2:	eb e0       	ldi	r30, 0x0B	; 11
 ad4:	f0 e0       	ldi	r31, 0x00	; 0
 ad6:	ec 0f       	add	r30, r28
 ad8:	fd 1f       	adc	r31, r29
 ada:	e0 0f       	add	r30, r16
 adc:	f1 1f       	adc	r31, r17
 ade:	80 83       	st	Z, r24
			 LCD_clear();//Clear LCD
			 //SENTENCE FROM EEPROM CORRESPONDING TO THE RELATIVE VALUES TO BE PRINTED ON THE LCD" You "
			
			u8 st[4];
			st[3] = '\0';
			for(u8 i = 0; i <= 2; i++)
 ae0:	f3 94       	inc	r15
 ae2:	52 e0       	ldi	r21, 0x02	; 2
 ae4:	5f 15       	cp	r21, r15
 ae6:	70 f7       	brcc	.-36     	; 0xac4 <__stack+0x265>
			{
				st[i] = EEPROM_Read_Byte(i+83);
			};
			
			LCD_display(st); //you
 ae8:	ce 01       	movw	r24, r28
 aea:	0b 96       	adiw	r24, 0x0b	; 11
 aec:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <LCD_display>
			 
			 LCD_display(st); //I really love you
			
		}
		else if ( ( ( 3125 < Analog_Thumb )&&(Analog_Thumb < 5000 ) ) && (( 1125 < Analog_Index_Finger)&&(Analog_Index_Finger < 3125 ) )&& ( (3125 < Analog_Middle_Finger ) && (Analog_Middle_Finger < 5000 ) )  &&  ( (3125 < Analog_Ring_Finger)&& (Analog_Ring_Finger < 5000 ) )  && ( ( 3125 < Analog_Little_Finger)&&(Analog_Little_Finger < 5000 ) )   )//All fingers are bended totally except index is bended by 45 degrees 
		{   
 af0:	44 ce       	rjmp	.-888    	; 0x77a <GDF_MainCode+0x20>
			};
			
			LCD_display(st); //you
			
		}
		else if (  (Analog_Thumb < 625 ) && (( 3125 < Analog_Index_Finger)&&(Analog_Index_Finger < 5000 ) ) && (( 3125 < Analog_Middle_Finger)&&(Analog_Middle_Finger < 5000 ) )  &&  ( (3125 < Analog_Ring_Finger)&& (Analog_Ring_Finger < 5000 ) )  &&  ( ( 3125 < Analog_Little_Finger)&&(Analog_Little_Finger < 5000 ) )   )//All fingers are bended except thumb is flat
 af2:	01 37       	cpi	r16, 0x71	; 113
 af4:	12 40       	sbci	r17, 0x02	; 2
 af6:	e8 f5       	brcc	.+122    	; 0xb72 <__stack+0x313>
 af8:	c4 01       	movw	r24, r8
 afa:	86 53       	subi	r24, 0x36	; 54
 afc:	9c 40       	sbci	r25, 0x0C	; 12
 afe:	82 35       	cpi	r24, 0x52	; 82
 b00:	97 40       	sbci	r25, 0x07	; 7
 b02:	b8 f5       	brcc	.+110    	; 0xb72 <__stack+0x313>
 b04:	c2 01       	movw	r24, r4
 b06:	86 53       	subi	r24, 0x36	; 54
 b08:	9c 40       	sbci	r25, 0x0C	; 12
 b0a:	82 35       	cpi	r24, 0x52	; 82
 b0c:	97 40       	sbci	r25, 0x07	; 7
 b0e:	88 f5       	brcc	.+98     	; 0xb72 <__stack+0x313>
 b10:	88 a1       	ldd	r24, Y+32	; 0x20
 b12:	99 a1       	ldd	r25, Y+33	; 0x21
 b14:	86 53       	subi	r24, 0x36	; 54
 b16:	9c 40       	sbci	r25, 0x0C	; 12
 b18:	82 35       	cpi	r24, 0x52	; 82
 b1a:	97 40       	sbci	r25, 0x07	; 7
 b1c:	50 f5       	brcc	.+84     	; 0xb72 <__stack+0x313>
 b1e:	ca 01       	movw	r24, r20
 b20:	86 53       	subi	r24, 0x36	; 54
 b22:	9c 40       	sbci	r25, 0x0C	; 12
 b24:	82 35       	cpi	r24, 0x52	; 82
 b26:	97 40       	sbci	r25, 0x07	; 7
 b28:	20 f5       	brcc	.+72     	; 0xb72 <__stack+0x313>
 b2a:	2f ef       	ldi	r18, 0xFF	; 255
 b2c:	33 ed       	ldi	r19, 0xD3	; 211
 b2e:	40 e3       	ldi	r20, 0x30	; 48
 b30:	21 50       	subi	r18, 0x01	; 1
 b32:	30 40       	sbci	r19, 0x00	; 0
 b34:	40 40       	sbci	r20, 0x00	; 0
 b36:	e1 f7       	brne	.-8      	; 0xb30 <__stack+0x2d1>
 b38:	00 c0       	rjmp	.+0      	; 0xb3a <__stack+0x2db>
 b3a:	00 00       	nop
		{   
			
			 _delay_ms(1000);
			 LCD_clear();//Clear LCD
 b3c:	0e 94 50 07 	call	0xea0	; 0xea0 <LCD_clear>
			 //SENTENCE FROM EEPROM CORRESPONDING TO THE RELATIVE VALUES TO BE PRINTED ON THE LCD" Good job "
			
			 u8 st[9];
			 st[8] = '\0';
 b40:	1b 8a       	std	Y+19, r1	; 0x13
			 for(u8 i = 0; i <= 7; i++)
 b42:	f1 2c       	mov	r15, r1
 b44:	0e c0       	rjmp	.+28     	; 0xb62 <__stack+0x303>
			 {
				 st[i] = EEPROM_Read_Byte(i+10);
 b46:	0f 2d       	mov	r16, r15
 b48:	10 e0       	ldi	r17, 0x00	; 0
 b4a:	c8 01       	movw	r24, r16
 b4c:	0a 96       	adiw	r24, 0x0a	; 10
 b4e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <EEPROM_Read_Byte>
 b52:	eb e0       	ldi	r30, 0x0B	; 11
 b54:	f0 e0       	ldi	r31, 0x00	; 0
 b56:	ec 0f       	add	r30, r28
 b58:	fd 1f       	adc	r31, r29
 b5a:	e0 0f       	add	r30, r16
 b5c:	f1 1f       	adc	r31, r17
 b5e:	80 83       	st	Z, r24
			 LCD_clear();//Clear LCD
			 //SENTENCE FROM EEPROM CORRESPONDING TO THE RELATIVE VALUES TO BE PRINTED ON THE LCD" Good job "
			
			 u8 st[9];
			 st[8] = '\0';
			 for(u8 i = 0; i <= 7; i++)
 b60:	f3 94       	inc	r15
 b62:	57 e0       	ldi	r21, 0x07	; 7
 b64:	5f 15       	cp	r21, r15
 b66:	78 f7       	brcc	.-34     	; 0xb46 <__stack+0x2e7>
			 {
				 st[i] = EEPROM_Read_Byte(i+10);
			 };
			 
			 LCD_display(st); //Good job
 b68:	ce 01       	movw	r24, r28
 b6a:	0b 96       	adiw	r24, 0x0b	; 11
 b6c:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <LCD_display>
			
			LCD_display(st); //you
			
		}
		else if (  (Analog_Thumb < 625 ) && (( 3125 < Analog_Index_Finger)&&(Analog_Index_Finger < 5000 ) ) && (( 3125 < Analog_Middle_Finger)&&(Analog_Middle_Finger < 5000 ) )  &&  ( (3125 < Analog_Ring_Finger)&& (Analog_Ring_Finger < 5000 ) )  &&  ( ( 3125 < Analog_Little_Finger)&&(Analog_Little_Finger < 5000 ) )   )//All fingers are bended except thumb is flat
		{   
 b70:	04 ce       	rjmp	.-1016   	; 0x77a <GDF_MainCode+0x20>
			 };
			 
			 LCD_display(st); //Good job
			 
		}
		else if (  (( 3125 < Analog_Thumb )&&(Analog_Thumb < 5000 ) ) && (( 1125 < Analog_Index_Finger)&&(Analog_Index_Finger < 3125 ) ) && ( (1125 < Analog_Middle_Finger ) && (Analog_Middle_Finger < 3125 ) )  &&  ( (3125 < Analog_Ring_Finger)&& (Analog_Ring_Finger < 5000 ) )  &&  ( ( 3125 < Analog_Little_Finger)&&(Analog_Little_Finger < 5000 ) )   )//All fingers are bended totally except middle and index are bended by 45 degrees
 b72:	82 e5       	ldi	r24, 0x52	; 82
 b74:	c8 16       	cp	r12, r24
 b76:	87 e0       	ldi	r24, 0x07	; 7
 b78:	d8 06       	cpc	r13, r24
 b7a:	08 f0       	brcs	.+2      	; 0xb7e <__stack+0x31f>
 b7c:	fe cd       	rjmp	.-1028   	; 0x77a <GDF_MainCode+0x20>
 b7e:	96 e6       	ldi	r25, 0x66	; 102
 b80:	89 1a       	sub	r8, r25
 b82:	94 e0       	ldi	r25, 0x04	; 4
 b84:	99 0a       	sbc	r9, r25
 b86:	ef ec       	ldi	r30, 0xCF	; 207
 b88:	8e 16       	cp	r8, r30
 b8a:	e7 e0       	ldi	r30, 0x07	; 7
 b8c:	9e 06       	cpc	r9, r30
 b8e:	08 f0       	brcs	.+2      	; 0xb92 <__stack+0x333>
 b90:	f4 cd       	rjmp	.-1048   	; 0x77a <GDF_MainCode+0x20>
 b92:	26 e6       	ldi	r18, 0x66	; 102
 b94:	42 1a       	sub	r4, r18
 b96:	24 e0       	ldi	r18, 0x04	; 4
 b98:	52 0a       	sbc	r5, r18
 b9a:	3f ec       	ldi	r19, 0xCF	; 207
 b9c:	43 16       	cp	r4, r19
 b9e:	37 e0       	ldi	r19, 0x07	; 7
 ba0:	53 06       	cpc	r5, r19
 ba2:	08 f0       	brcs	.+2      	; 0xba6 <__stack+0x347>
 ba4:	ea cd       	rjmp	.-1068   	; 0x77a <GDF_MainCode+0x20>
 ba6:	88 a1       	ldd	r24, Y+32	; 0x20
 ba8:	99 a1       	ldd	r25, Y+33	; 0x21
 baa:	86 53       	subi	r24, 0x36	; 54
 bac:	9c 40       	sbci	r25, 0x0C	; 12
 bae:	82 35       	cpi	r24, 0x52	; 82
 bb0:	97 40       	sbci	r25, 0x07	; 7
 bb2:	08 f0       	brcs	.+2      	; 0xbb6 <__stack+0x357>
 bb4:	e2 cd       	rjmp	.-1084   	; 0x77a <GDF_MainCode+0x20>
 bb6:	46 53       	subi	r20, 0x36	; 54
 bb8:	5c 40       	sbci	r21, 0x0C	; 12
 bba:	42 35       	cpi	r20, 0x52	; 82
 bbc:	57 40       	sbci	r21, 0x07	; 7
 bbe:	08 f0       	brcs	.+2      	; 0xbc2 <__stack+0x363>
 bc0:	dc cd       	rjmp	.-1096   	; 0x77a <GDF_MainCode+0x20>
 bc2:	3f ef       	ldi	r19, 0xFF	; 255
 bc4:	43 ed       	ldi	r20, 0xD3	; 211
 bc6:	50 e3       	ldi	r21, 0x30	; 48
 bc8:	31 50       	subi	r19, 0x01	; 1
 bca:	40 40       	sbci	r20, 0x00	; 0
 bcc:	50 40       	sbci	r21, 0x00	; 0
 bce:	e1 f7       	brne	.-8      	; 0xbc8 <__stack+0x369>
 bd0:	00 c0       	rjmp	.+0      	; 0xbd2 <__stack+0x373>
 bd2:	00 00       	nop
		{   
			
			 _delay_ms(1000);
			LCD_clear();//Clear LCD
 bd4:	0e 94 50 07 	call	0xea0	; 0xea0 <LCD_clear>
			//SENTENCE FROM EEPROM CORRESPONDING TO THE RELATIVE VALUES TO BE PRINTED ON THE LCD" I watch you "
			u8 st[12];
			st[11] = '\0';
 bd8:	1e 8a       	std	Y+22, r1	; 0x16
			for(u8 i = 0; i <= 10; i++)
 bda:	f1 2c       	mov	r15, r1
 bdc:	0e c0       	rjmp	.+28     	; 0xbfa <__stack+0x39b>
			{
				st[i] = EEPROM_Read_Byte(i+18);
 bde:	0f 2d       	mov	r16, r15
 be0:	10 e0       	ldi	r17, 0x00	; 0
 be2:	c8 01       	movw	r24, r16
 be4:	42 96       	adiw	r24, 0x12	; 18
 be6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <EEPROM_Read_Byte>
 bea:	eb e0       	ldi	r30, 0x0B	; 11
 bec:	f0 e0       	ldi	r31, 0x00	; 0
 bee:	ec 0f       	add	r30, r28
 bf0:	fd 1f       	adc	r31, r29
 bf2:	e0 0f       	add	r30, r16
 bf4:	f1 1f       	adc	r31, r17
 bf6:	80 83       	st	Z, r24
			 _delay_ms(1000);
			LCD_clear();//Clear LCD
			//SENTENCE FROM EEPROM CORRESPONDING TO THE RELATIVE VALUES TO BE PRINTED ON THE LCD" I watch you "
			u8 st[12];
			st[11] = '\0';
			for(u8 i = 0; i <= 10; i++)
 bf8:	f3 94       	inc	r15
 bfa:	8a e0       	ldi	r24, 0x0A	; 10
 bfc:	8f 15       	cp	r24, r15
 bfe:	78 f7       	brcc	.-34     	; 0xbde <__stack+0x37f>
			{
				st[i] = EEPROM_Read_Byte(i+18);
			};
			
			LCD_display(st); //I watch you
 c00:	ce 01       	movw	r24, r28
 c02:	0b 96       	adiw	r24, 0x0b	; 11
 c04:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <LCD_display>
 c08:	b8 cd       	rjmp	.-1168   	; 0x77a <GDF_MainCode+0x20>

00000c0a <PRIVATE_WriteHalfPort>:
		{
			LCD_sendChar((Local_reversed%10)+'0');
			Local_reversed /= 10;
		}while (Local_reversed != 1);
	}
}
 c0a:	cf 93       	push	r28
 c0c:	c8 2f       	mov	r28, r24
 c0e:	48 2f       	mov	r20, r24
 c10:	41 70       	andi	r20, 0x01	; 1
 c12:	64 e0       	ldi	r22, 0x04	; 4
 c14:	82 e0       	ldi	r24, 0x02	; 2
 c16:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_setPinValue>
 c1a:	c1 fb       	bst	r28, 1
 c1c:	44 27       	eor	r20, r20
 c1e:	40 f9       	bld	r20, 0
 c20:	65 e0       	ldi	r22, 0x05	; 5
 c22:	82 e0       	ldi	r24, 0x02	; 2
 c24:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_setPinValue>
 c28:	c2 fb       	bst	r28, 2
 c2a:	44 27       	eor	r20, r20
 c2c:	40 f9       	bld	r20, 0
 c2e:	66 e0       	ldi	r22, 0x06	; 6
 c30:	82 e0       	ldi	r24, 0x02	; 2
 c32:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_setPinValue>
 c36:	c3 fb       	bst	r28, 3
 c38:	44 27       	eor	r20, r20
 c3a:	40 f9       	bld	r20, 0
 c3c:	67 e0       	ldi	r22, 0x07	; 7
 c3e:	82 e0       	ldi	r24, 0x02	; 2
 c40:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_setPinValue>
 c44:	cf 91       	pop	r28
 c46:	08 95       	ret

00000c48 <LCD_sendCmnd>:
 c48:	cf 93       	push	r28
 c4a:	c8 2f       	mov	r28, r24
 c4c:	40 e0       	ldi	r20, 0x00	; 0
 c4e:	61 e0       	ldi	r22, 0x01	; 1
 c50:	81 e0       	ldi	r24, 0x01	; 1
 c52:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_setPinValue>
 c56:	40 e0       	ldi	r20, 0x00	; 0
 c58:	62 e0       	ldi	r22, 0x02	; 2
 c5a:	81 e0       	ldi	r24, 0x01	; 1
 c5c:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_setPinValue>
 c60:	8c 2f       	mov	r24, r28
 c62:	82 95       	swap	r24
 c64:	8f 70       	andi	r24, 0x0F	; 15
 c66:	0e 94 05 06 	call	0xc0a	; 0xc0a <PRIVATE_WriteHalfPort>
 c6a:	41 e0       	ldi	r20, 0x01	; 1
 c6c:	63 e0       	ldi	r22, 0x03	; 3
 c6e:	81 e0       	ldi	r24, 0x01	; 1
 c70:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_setPinValue>
 c74:	8f e9       	ldi	r24, 0x9F	; 159
 c76:	9f e0       	ldi	r25, 0x0F	; 15
 c78:	01 97       	sbiw	r24, 0x01	; 1
 c7a:	f1 f7       	brne	.-4      	; 0xc78 <LCD_sendCmnd+0x30>
 c7c:	00 c0       	rjmp	.+0      	; 0xc7e <LCD_sendCmnd+0x36>
 c7e:	00 00       	nop
 c80:	40 e0       	ldi	r20, 0x00	; 0
 c82:	63 e0       	ldi	r22, 0x03	; 3
 c84:	81 e0       	ldi	r24, 0x01	; 1
 c86:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_setPinValue>
 c8a:	8c 2f       	mov	r24, r28
 c8c:	0e 94 05 06 	call	0xc0a	; 0xc0a <PRIVATE_WriteHalfPort>
 c90:	41 e0       	ldi	r20, 0x01	; 1
 c92:	63 e0       	ldi	r22, 0x03	; 3
 c94:	81 e0       	ldi	r24, 0x01	; 1
 c96:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_setPinValue>
 c9a:	8f e9       	ldi	r24, 0x9F	; 159
 c9c:	9f e0       	ldi	r25, 0x0F	; 15
 c9e:	01 97       	sbiw	r24, 0x01	; 1
 ca0:	f1 f7       	brne	.-4      	; 0xc9e <LCD_sendCmnd+0x56>
 ca2:	00 c0       	rjmp	.+0      	; 0xca4 <LCD_sendCmnd+0x5c>
 ca4:	00 00       	nop
 ca6:	40 e0       	ldi	r20, 0x00	; 0
 ca8:	63 e0       	ldi	r22, 0x03	; 3
 caa:	81 e0       	ldi	r24, 0x01	; 1
 cac:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_setPinValue>
 cb0:	cf 91       	pop	r28
 cb2:	08 95       	ret

00000cb4 <LCD_init>:
 cb4:	2f e7       	ldi	r18, 0x7F	; 127
 cb6:	85 eb       	ldi	r24, 0xB5	; 181
 cb8:	91 e0       	ldi	r25, 0x01	; 1
 cba:	21 50       	subi	r18, 0x01	; 1
 cbc:	80 40       	sbci	r24, 0x00	; 0
 cbe:	90 40       	sbci	r25, 0x00	; 0
 cc0:	e1 f7       	brne	.-8      	; 0xcba <LCD_init+0x6>
 cc2:	00 c0       	rjmp	.+0      	; 0xcc4 <LCD_init+0x10>
 cc4:	00 00       	nop
 cc6:	40 e0       	ldi	r20, 0x00	; 0
 cc8:	61 e0       	ldi	r22, 0x01	; 1
 cca:	81 e0       	ldi	r24, 0x01	; 1
 ccc:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_setPinValue>
 cd0:	40 e0       	ldi	r20, 0x00	; 0
 cd2:	62 e0       	ldi	r22, 0x02	; 2
 cd4:	81 e0       	ldi	r24, 0x01	; 1
 cd6:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_setPinValue>
 cda:	82 e0       	ldi	r24, 0x02	; 2
 cdc:	0e 94 05 06 	call	0xc0a	; 0xc0a <PRIVATE_WriteHalfPort>
 ce0:	41 e0       	ldi	r20, 0x01	; 1
 ce2:	63 e0       	ldi	r22, 0x03	; 3
 ce4:	81 e0       	ldi	r24, 0x01	; 1
 ce6:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_setPinValue>
 cea:	8f e9       	ldi	r24, 0x9F	; 159
 cec:	9f e0       	ldi	r25, 0x0F	; 15
 cee:	01 97       	sbiw	r24, 0x01	; 1
 cf0:	f1 f7       	brne	.-4      	; 0xcee <LCD_init+0x3a>
 cf2:	00 c0       	rjmp	.+0      	; 0xcf4 <LCD_init+0x40>
 cf4:	00 00       	nop
 cf6:	40 e0       	ldi	r20, 0x00	; 0
 cf8:	63 e0       	ldi	r22, 0x03	; 3
 cfa:	81 e0       	ldi	r24, 0x01	; 1
 cfc:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_setPinValue>
 d00:	88 e2       	ldi	r24, 0x28	; 40
 d02:	0e 94 24 06 	call	0xc48	; 0xc48 <LCD_sendCmnd>
 d06:	90 ee       	ldi	r25, 0xE0	; 224
 d08:	9a 95       	dec	r25
 d0a:	f1 f7       	brne	.-4      	; 0xd08 <LCD_init+0x54>
 d0c:	8f e0       	ldi	r24, 0x0F	; 15
 d0e:	0e 94 24 06 	call	0xc48	; 0xc48 <LCD_sendCmnd>
 d12:	20 ee       	ldi	r18, 0xE0	; 224
 d14:	2a 95       	dec	r18
 d16:	f1 f7       	brne	.-4      	; 0xd14 <LCD_init+0x60>
 d18:	81 e0       	ldi	r24, 0x01	; 1
 d1a:	0e 94 24 06 	call	0xc48	; 0xc48 <LCD_sendCmnd>
 d1e:	8f ef       	ldi	r24, 0xFF	; 255
 d20:	98 e1       	ldi	r25, 0x18	; 24
 d22:	01 97       	sbiw	r24, 0x01	; 1
 d24:	f1 f7       	brne	.-4      	; 0xd22 <LCD_init+0x6e>
 d26:	00 c0       	rjmp	.+0      	; 0xd28 <LCD_init+0x74>
 d28:	00 00       	nop
 d2a:	86 e0       	ldi	r24, 0x06	; 6
 d2c:	0e 94 24 06 	call	0xc48	; 0xc48 <LCD_sendCmnd>
 d30:	08 95       	ret

00000d32 <LCD_sendChar>:
 d32:	cf 93       	push	r28
 d34:	c8 2f       	mov	r28, r24
 d36:	41 e0       	ldi	r20, 0x01	; 1
 d38:	61 e0       	ldi	r22, 0x01	; 1
 d3a:	81 e0       	ldi	r24, 0x01	; 1
 d3c:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_setPinValue>
 d40:	40 e0       	ldi	r20, 0x00	; 0
 d42:	62 e0       	ldi	r22, 0x02	; 2
 d44:	81 e0       	ldi	r24, 0x01	; 1
 d46:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_setPinValue>
 d4a:	8c 2f       	mov	r24, r28
 d4c:	82 95       	swap	r24
 d4e:	8f 70       	andi	r24, 0x0F	; 15
 d50:	0e 94 05 06 	call	0xc0a	; 0xc0a <PRIVATE_WriteHalfPort>
 d54:	41 e0       	ldi	r20, 0x01	; 1
 d56:	63 e0       	ldi	r22, 0x03	; 3
 d58:	81 e0       	ldi	r24, 0x01	; 1
 d5a:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_setPinValue>
 d5e:	8f e9       	ldi	r24, 0x9F	; 159
 d60:	9f e0       	ldi	r25, 0x0F	; 15
 d62:	01 97       	sbiw	r24, 0x01	; 1
 d64:	f1 f7       	brne	.-4      	; 0xd62 <LCD_sendChar+0x30>
 d66:	00 c0       	rjmp	.+0      	; 0xd68 <LCD_sendChar+0x36>
 d68:	00 00       	nop
 d6a:	40 e0       	ldi	r20, 0x00	; 0
 d6c:	63 e0       	ldi	r22, 0x03	; 3
 d6e:	81 e0       	ldi	r24, 0x01	; 1
 d70:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_setPinValue>
 d74:	8c 2f       	mov	r24, r28
 d76:	0e 94 05 06 	call	0xc0a	; 0xc0a <PRIVATE_WriteHalfPort>
 d7a:	41 e0       	ldi	r20, 0x01	; 1
 d7c:	63 e0       	ldi	r22, 0x03	; 3
 d7e:	81 e0       	ldi	r24, 0x01	; 1
 d80:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_setPinValue>
 d84:	8f e9       	ldi	r24, 0x9F	; 159
 d86:	9f e0       	ldi	r25, 0x0F	; 15
 d88:	01 97       	sbiw	r24, 0x01	; 1
 d8a:	f1 f7       	brne	.-4      	; 0xd88 <LCD_sendChar+0x56>
 d8c:	00 c0       	rjmp	.+0      	; 0xd8e <LCD_sendChar+0x5c>
 d8e:	00 00       	nop
 d90:	40 e0       	ldi	r20, 0x00	; 0
 d92:	63 e0       	ldi	r22, 0x03	; 3
 d94:	81 e0       	ldi	r24, 0x01	; 1
 d96:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_setPinValue>
 d9a:	cf 91       	pop	r28
 d9c:	08 95       	ret

00000d9e <LCD_goToSpecificPosition>:
void LCD_goToSpecificPosition(u8 LineNumber, u8 Position)
{
	if(LineNumber == LCD_LINE_ONE)
 d9e:	81 30       	cpi	r24, 0x01	; 1
 da0:	39 f4       	brne	.+14     	; 0xdb0 <LCD_goToSpecificPosition+0x12>
	{
		if(Position <= 15)
 da2:	60 31       	cpi	r22, 0x10	; 16
 da4:	68 f4       	brcc	.+26     	; 0xdc0 <LCD_goToSpecificPosition+0x22>
		{
			LCD_sendCmnd(0x80 + Position);
 da6:	80 e8       	ldi	r24, 0x80	; 128
 da8:	86 0f       	add	r24, r22
 daa:	0e 94 24 06 	call	0xc48	; 0xc48 <LCD_sendCmnd>
 dae:	08 95       	ret
		}
	}

	else if (LineNumber == LCD_LINE_TWO)
 db0:	82 30       	cpi	r24, 0x02	; 2
 db2:	31 f4       	brne	.+12     	; 0xdc0 <LCD_goToSpecificPosition+0x22>
	{
		if(Position <= 15)
 db4:	60 31       	cpi	r22, 0x10	; 16
 db6:	20 f4       	brcc	.+8      	; 0xdc0 <LCD_goToSpecificPosition+0x22>
		{
			LCD_sendCmnd(0xc0 + Position);
 db8:	80 ec       	ldi	r24, 0xC0	; 192
 dba:	86 0f       	add	r24, r22
 dbc:	0e 94 24 06 	call	0xc48	; 0xc48 <LCD_sendCmnd>
 dc0:	08 95       	ret

00000dc2 <LCD_display>:
		}
	}
}

void LCD_display(u8*string)
{
 dc2:	ef 92       	push	r14
 dc4:	ff 92       	push	r15
 dc6:	0f 93       	push	r16
 dc8:	1f 93       	push	r17
 dca:	cf 93       	push	r28
 dcc:	df 93       	push	r29
 dce:	ec 01       	movw	r28, r24
	u8 i = 0;
	u8 length = 1;
 dd0:	91 e0       	ldi	r25, 0x01	; 1
	}
}

void LCD_display(u8*string)
{
	u8 i = 0;
 dd2:	80 e0       	ldi	r24, 0x00	; 0
	u8 length = 1;
	while(string[i] != '\0')
 dd4:	02 c0       	rjmp	.+4      	; 0xdda <LCD_display+0x18>
	{
		length++;
 dd6:	9f 5f       	subi	r25, 0xFF	; 255
		i++;
 dd8:	8f 5f       	subi	r24, 0xFF	; 255

void LCD_display(u8*string)
{
	u8 i = 0;
	u8 length = 1;
	while(string[i] != '\0')
 dda:	fe 01       	movw	r30, r28
 ddc:	e8 0f       	add	r30, r24
 dde:	f1 1d       	adc	r31, r1
 de0:	20 81       	ld	r18, Z
 de2:	21 11       	cpse	r18, r1
 de4:	f8 cf       	rjmp	.-16     	; 0xdd6 <LCD_display+0x14>
	{
		length++;
		i++;
	}
	
	if(length > 17)
 de6:	92 31       	cpi	r25, 0x12	; 18
 de8:	48 f4       	brcc	.+18     	; 0xdfc <LCD_display+0x3a>
 dea:	2c c0       	rjmp	.+88     	; 0xe44 <LCD_display+0x82>
		u8 check = -1;
		if((string[16] != ' ') || (string[16] != '\0'))
		{
			for(u8 j = 16; j > 0; j--)
			{
				if(string[j] == ' ')
 dec:	fe 01       	movw	r30, r28
 dee:	e1 0f       	add	r30, r17
 df0:	f1 1d       	adc	r31, r1
 df2:	80 81       	ld	r24, Z
 df4:	80 32       	cpi	r24, 0x20	; 32
 df6:	31 f0       	breq	.+12     	; 0xe04 <LCD_display+0x42>
	if(length > 17)
	{
		u8 check = -1;
		if((string[16] != ' ') || (string[16] != '\0'))
		{
			for(u8 j = 16; j > 0; j--)
 df8:	11 50       	subi	r17, 0x01	; 1
 dfa:	01 c0       	rjmp	.+2      	; 0xdfe <LCD_display+0x3c>
 dfc:	10 e1       	ldi	r17, 0x10	; 16
 dfe:	11 11       	cpse	r17, r1
 e00:	f5 cf       	rjmp	.-22     	; 0xdec <LCD_display+0x2a>
		i++;
	}
	
	if(length > 17)
	{
		u8 check = -1;
 e02:	1f ef       	ldi	r17, 0xFF	; 255
				{
					check = j;
					break;
				}
			}
			u8 counter1 = 0;
 e04:	00 e0       	ldi	r16, 0x00	; 0
			while (string[counter1]!='\0')
 e06:	16 c0       	rjmp	.+44     	; 0xe34 <LCD_display+0x72>
			{
				if(counter1 == (check+1))
 e08:	40 2f       	mov	r20, r16
 e0a:	50 e0       	ldi	r21, 0x00	; 0
 e0c:	21 2f       	mov	r18, r17
 e0e:	30 e0       	ldi	r19, 0x00	; 0
 e10:	2f 5f       	subi	r18, 0xFF	; 255
 e12:	3f 4f       	sbci	r19, 0xFF	; 255
 e14:	42 17       	cp	r20, r18
 e16:	53 07       	cpc	r21, r19
 e18:	51 f4       	brne	.+20     	; 0xe2e <LCD_display+0x6c>
				{
					LCD_goToSpecificPosition(2, 0);
 e1a:	60 e0       	ldi	r22, 0x00	; 0
 e1c:	82 e0       	ldi	r24, 0x02	; 2
 e1e:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_goToSpecificPosition>
					LCD_sendChar(string[counter1]);
 e22:	f7 01       	movw	r30, r14
 e24:	80 81       	ld	r24, Z
 e26:	0e 94 99 06 	call	0xd32	; 0xd32 <LCD_sendChar>
					++counter1;
 e2a:	0f 5f       	subi	r16, 0xFF	; 255
 e2c:	03 c0       	rjmp	.+6      	; 0xe34 <LCD_display+0x72>
				}
				else
				{
					LCD_sendChar(string[counter1]);
 e2e:	0e 94 99 06 	call	0xd32	; 0xd32 <LCD_sendChar>
					++counter1;
 e32:	0f 5f       	subi	r16, 0xFF	; 255
					check = j;
					break;
				}
			}
			u8 counter1 = 0;
			while (string[counter1]!='\0')
 e34:	7e 01       	movw	r14, r28
 e36:	e0 0e       	add	r14, r16
 e38:	f1 1c       	adc	r15, r1
 e3a:	f7 01       	movw	r30, r14
 e3c:	80 81       	ld	r24, Z
 e3e:	81 11       	cpse	r24, r1
 e40:	e3 cf       	rjmp	.-58     	; 0xe08 <LCD_display+0x46>
 e42:	27 c0       	rjmp	.+78     	; 0xe92 <LCD_display+0xd0>
					++counter1;
				}
			}
		}
	}
	else if(string[16] == ' ')
 e44:	88 89       	ldd	r24, Y+16	; 0x10
 e46:	80 32       	cpi	r24, 0x20	; 32
 e48:	91 f0       	breq	.+36     	; 0xe6e <LCD_display+0xac>
 e4a:	10 e0       	ldi	r17, 0x00	; 0
 e4c:	1c c0       	rjmp	.+56     	; 0xe86 <LCD_display+0xc4>
	{
		u8 counter2 = 0;
		while (string[counter2]!='\0')
		{
			if(counter2 <= 16)
 e4e:	11 31       	cpi	r17, 0x11	; 17
 e50:	50 f4       	brcc	.+20     	; 0xe66 <LCD_display+0xa4>
			{
				LCD_goToSpecificPosition(2, 0);
 e52:	60 e0       	ldi	r22, 0x00	; 0
 e54:	82 e0       	ldi	r24, 0x02	; 2
 e56:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_goToSpecificPosition>
				LCD_sendChar(string[counter2]);
 e5a:	f7 01       	movw	r30, r14
 e5c:	80 81       	ld	r24, Z
 e5e:	0e 94 99 06 	call	0xd32	; 0xd32 <LCD_sendChar>
				++counter2;
 e62:	1f 5f       	subi	r17, 0xFF	; 255
 e64:	05 c0       	rjmp	.+10     	; 0xe70 <LCD_display+0xae>
			}
			else
			{
				LCD_sendChar(string[counter2]);
 e66:	0e 94 99 06 	call	0xd32	; 0xd32 <LCD_sendChar>
				++counter2;
 e6a:	1f 5f       	subi	r17, 0xFF	; 255
 e6c:	01 c0       	rjmp	.+2      	; 0xe70 <LCD_display+0xae>
 e6e:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	else if(string[16] == ' ')
	{
		u8 counter2 = 0;
		while (string[counter2]!='\0')
 e70:	7e 01       	movw	r14, r28
 e72:	e1 0e       	add	r14, r17
 e74:	f1 1c       	adc	r15, r1
 e76:	f7 01       	movw	r30, r14
 e78:	80 81       	ld	r24, Z
 e7a:	81 11       	cpse	r24, r1
 e7c:	e8 cf       	rjmp	.-48     	; 0xe4e <LCD_display+0x8c>
 e7e:	09 c0       	rjmp	.+18     	; 0xe92 <LCD_display+0xd0>
	else
	{
		u8 counter3=0;
		while (string[counter3]!='\0')
		{
			LCD_sendChar(string[counter3]);
 e80:	0e 94 99 06 	call	0xd32	; 0xd32 <LCD_sendChar>
			++counter3;
 e84:	1f 5f       	subi	r17, 0xFF	; 255
		}
	}
	else
	{
		u8 counter3=0;
		while (string[counter3]!='\0')
 e86:	fe 01       	movw	r30, r28
 e88:	e1 0f       	add	r30, r17
 e8a:	f1 1d       	adc	r31, r1
 e8c:	80 81       	ld	r24, Z
 e8e:	81 11       	cpse	r24, r1
 e90:	f7 cf       	rjmp	.-18     	; 0xe80 <LCD_display+0xbe>
		{
			LCD_sendChar(string[counter3]);
			++counter3;
		}
	}
}
 e92:	df 91       	pop	r29
 e94:	cf 91       	pop	r28
 e96:	1f 91       	pop	r17
 e98:	0f 91       	pop	r16
 e9a:	ff 90       	pop	r15
 e9c:	ef 90       	pop	r14
 e9e:	08 95       	ret

00000ea0 <LCD_clear>:

void LCD_clear(void)
{
	LCD_sendCmnd(0x01);		/* Clear display */
 ea0:	81 e0       	ldi	r24, 0x01	; 1
 ea2:	0e 94 24 06 	call	0xc48	; 0xc48 <LCD_sendCmnd>
 ea6:	8f e3       	ldi	r24, 0x3F	; 63
 ea8:	9f e1       	ldi	r25, 0x1F	; 31
 eaa:	01 97       	sbiw	r24, 0x01	; 1
 eac:	f1 f7       	brne	.-4      	; 0xeaa <LCD_clear+0xa>
 eae:	00 c0       	rjmp	.+0      	; 0xeb0 <LCD_clear+0x10>
 eb0:	00 00       	nop
	_delay_ms(2);
	LCD_sendCmnd (0x80);		/* Cursor at home position */
 eb2:	80 e8       	ldi	r24, 0x80	; 128
 eb4:	0e 94 24 06 	call	0xc48	; 0xc48 <LCD_sendCmnd>
 eb8:	08 95       	ret

00000eba <main>:
 #include "GDF_interface.h"


int main(void)
{
	GDF_PinDirectionInit();
 eba:	0e 94 70 03 	call	0x6e0	; 0x6e0 <GDF_PinDirectionInit>
	GDF_MainCode();
 ebe:	0e 94 ad 03 	call	0x75a	; 0x75a <GDF_MainCode>
 ec2:	ff cf       	rjmp	.-2      	; 0xec2 <main+0x8>

00000ec4 <__umulhisi3>:
 ec4:	a2 9f       	mul	r26, r18
 ec6:	b0 01       	movw	r22, r0
 ec8:	b3 9f       	mul	r27, r19
 eca:	c0 01       	movw	r24, r0
 ecc:	a3 9f       	mul	r26, r19
 ece:	70 0d       	add	r23, r0
 ed0:	81 1d       	adc	r24, r1
 ed2:	11 24       	eor	r1, r1
 ed4:	91 1d       	adc	r25, r1
 ed6:	b2 9f       	mul	r27, r18
 ed8:	70 0d       	add	r23, r0
 eda:	81 1d       	adc	r24, r1
 edc:	11 24       	eor	r1, r1
 ede:	91 1d       	adc	r25, r1
 ee0:	08 95       	ret

00000ee2 <_exit>:
 ee2:	f8 94       	cli

00000ee4 <__stop_program>:
 ee4:	ff cf       	rjmp	.-2      	; 0xee4 <__stop_program>
